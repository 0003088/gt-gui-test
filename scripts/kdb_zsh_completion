#compdef kdb
# This file needs to be renamed to _kdb to work and must be in the $fpath
#
# ZSH completion file for KDB
#
# Sebastian Bachmann <hello@reox.at>, 2016

_kdb_paths () {
    # It seems this is enough to get all keys into the compsystem

    typeset -a paths
    # Count the number of slashes to know where we are
    slashes=${#PREFIX//[^\\\/]/}
    if [ $slashes -eq 0 ]; then
        # If no slashes, we perfom search on /
        paths=($(kdb ls / | cut -d "/" -f 1 | uniq))
    else
        # Check if key is a leaf
        kdb ls / | grep -q -e "^${PREFIX}$"
        if [ $? -eq 0 ]; then
            _message "$PREFIX is a leaf."
            return
        fi
        kdb ls / | grep -q -e "^$PREFIX"
        if [ $? -ne 0 ]; then
            # TODO need to check here for the key w/o /. 
            # probably move into a function
            kdb ls / | grep -q -e "^${PREFIX:0:-1}$"
            if [ $? -eq 0 ]; then
                _message "${PREFIX:0:-1} is a leaf."
                return
            fi
            _message -e "Could not find $PREFIX as a valid path"
        fi

        # We need to check if the last char is a /
        # If not, we remove the garbled part at the end and search from there.
        if [ ${PREFIX[-1]} == "/" ]; then
            paths=($(kdb ls $PREFIX | cut -d "/" -f -$(( slashes + 1 )) ))
        else
            pre=$(cut -d "/" -f -$slashes <<< $PREFIX)
            paths=($(kdb ls $pre | cut -d "/" -f -$(( slashes + 1 )) ))
        fi

    fi
    _values -s / 'kdb path' $paths
}

# These are the functions for each command
_kdb-check () { }
_kdb-convert () { }
_kdb-cp () { }
_kdb-export () { }
_kdb-file () { }
_kdb-fstab () { }
_kdb-get () { 
    _kdb_paths
}
_kdb-getmeta () { }
_kdb-import () { }
_kdb-info () { }
_kdb-list () { }
_kdb-ls () {
# Example how to get more arguments in this case
    _arguments -w -C -S -s \
        "--foo[dunno]" \
        "--bar[sdfdsf]" && return
}
_kdb-lsmeta () { }
_kdb-merge () { }
_kdb-mount () { }
_kdb-mv () { }
_kdb-remount () { }
_kdb-rm () {
}
_kdb-set () {
# Example how to get files as completion in this stage
    _path_files -W /home/reox/git/tuwien
}
_kdb-setmeta () { }
_kdb-sget () { }
_kdb-shell () { }
_kdb-test () { }
_kdb-umount () { }
_kdb-vset () { }
_kdb-help () { }
_kdb-list-tools () { }


# This function handles the commands of kdb and passes them
# to the function which actually shows the options.

_kdb_commands () {
    # TODO Copy&Paste from git completion
    # I have some clue what is going on here, but need to rewrite that someday

    local -a cmdtypes
    cmdtypes=(main_commands)

    local -a $cmdtypes

    main_commands=(
        check:'Do some basic checks on a plugin.'
        convert:'Convert configuration.'
        cp:'Copy keys within the key database.'
        export:'Export configuration from the key database.'
        file:'Prints the file where a key is located.'
        fstab:'Create a new fstab entry.'
        get:'Get the value of an individual key.'
        getmeta:'Get a meta value.'
        import:'Import configuration to the key database.'
        info:'Print information about a plugin.'
        list:'List available plugins.'
        ls:'List the names of keys below a given name.'
        lsmeta:'Get all meta information of an individual key.'
        merge:'Three-way merge of KeySets.'
        mount:'Mount a new backend.'
        mv:'Move configuration within the key database.'
        remount:'Remount an existing backend with a different filename.'
        rm:'Remove key(s) from key database.'
        set:'Set the value of an individual key.'
        setmeta:'Set a meta value.'
        sget:'Get the value of an individual key within a shell script.'
        shell:'Start a kdb shell.'
        test:'Run key database test suite.'
        umount:'Unmount backend from key database.'
        vset:'Set a value together with a validation regex.'
        help:'View the man page of a tool'
        list-tools:'List all external tools')

  zstyle -a :completion:$curcontext: user-commands user_commands

  local -a aliases
  aliases=()
  local cmdtype len dup sep
  local -a allcmds allmatching alts disp expl

  zstyle -s ":completion:${curcontext}:" list-separator sep || sep=--
  for cmdtype in $cmdtypes aliases; do
    if [[ $cmdtype = aliases ]]; then
      for dup in ${${aliases%:*}:*allcmds}; do
	aliases=( ${aliases:#$dup:*} )
      done
    fi
    local -a ${cmdtype}_m
    set -A ${cmdtype}_m ${(P)cmdtype%%:*}
    allcmds+=( ${(P)${:-${cmdtype}_m}} )
  done
  zstyle -T ":completion:${curcontext}:" verbose && disp=(-ld '${cmdtype}_d')
  _description '' expl '' # get applicable matchers
  compadd "$expl[@]" -O allmatching -a allcmds
  len=${#${(O)allmatching//?/.}[1]} # length of longest match
  for cmdtype in aliases $cmdtypes; do
    local -a ${cmdtype}_d
    (( $#disp )) && set -A ${cmdtype}_d \
        ${${(r.COLUMNS-4.)${(P)cmdtype}/(#s)(#m)[^:]##:/${(r.len.)MATCH[1,-2]} $sep }%% #}
    alts+=( "${cmdtype//_/-}:${${cmdtype//_/ }%%(e|)s}:compadd ${(e)disp} -a ${cmdtype}_m" )
  done

  _alternative $alts
}


# Main Function
_kdb () {
    local curcontext=$curcontext state line

    integer ret=1

    # TODO disallow multiple kdb paths
    _arguments -C \
                   '-H[show the man page]'\
                   '--help[show the man page]'\
                   '-V[Print version info]'\
                   '--version[Print version info]'\
                   '-v[Explain what is happening]'\
                   '--verbose[Explain what is happening]'\
                   '-C[Print never/auto(default)/always colored output]:when'\
                   '--color=-[Print never/auto(default)/always colored output]: :'\
                   '-p[Use a different kdb profile]:profile'\
                   '--profile=-[Use a different kdb profile]: :'\
                   '(-): :->command' \
                   '(-)*:: :->option-or-argument' && return

    case $state in
        (command)
            _kdb_commands
        ;;
        (option-or-argument)
            curcontext=${curcontext%:*:*}:kdb-$words[1]:

            if ! _call_function ret _kdb-$words[1]; then
                if zstyle -T :completion:$curcontext: use-fallback; then
                    _default && ret=0
                else
                    _message "unknown sub-command: $words[1]"
                fi
            fi
        ;;

    esac

    return
}

_kdb
