#This document describes all meta data/schema values available.
#
# meta-meta (description how to parse that file)
#
# [the name of the meta-key]
# type= (string|enumeration|regular expression) the type of the meta-value
# status= (implemented|idea) the current state of this meta data entry
# plugin= the plugins which use the meta-key (space separated)
# description= explains what it is about
# note= give additional notes for that meta-key
# example= give additional examples how the meta-key might look like
#
# v0.4



#
# Needed for contracts (defined by specifications)=
#


[needs/#]
type= string
status= proposed
description= hint of application developer that the key actually needs
  a specific plugin (that cannot be derived by other metadata)
  "needs" means that it is semantically absolutely necessary and
  required that such an plugin exists.
  Without the plugin the application might break.
  If the plugin is optional and only nice to have, use recommends
  instead.
example=
  needs/#0=augeas
  needs/#1=validation
note=  It is generally preferred that other metadata will be used to
  deduce the needs of the specification, e.g. use check/validation
  meta data instead of as given above.

[config/needs/#/_]
type= string
status= proposed
description= Arbitrary metakeys that indicate that the key needs some
  configuration for plugins in order to work.
example=
  config/needs/#0/lenses=path/to/lenses.aug
  config/needs/#1/script=path/to/script.py
note=
  1.) The config will be given to the user-part of the plugin
      referred to.
  2.) It is not possible for meta keys to have meta data.
      So currently you cannot configure e.g. a glob plugin this way.
      This is not necessary anyway, because every meta data defined
      in the specification can be retrieved by the user through
      the spec/ hierarchy.

[config/_]
type= string
status= proposed
description= Arbitrary metakeys that indicate that the key needs some
  plugin configuration in order to work.
  This configuration will be written to the system/ part and will be
  available for all plugins.
note= Avoid this feature and use other metadata instead.

[recommends/#]
type= string
status= proposed
description= Key recommends a plugin for further features.
  The semantics are still well-defined if the plugin is absent.
note= Avoid this feature and use other metadata instead.


#
# Important meta-data often used in configuration files
# (and seldom in specifications)
#

[order]
type= int
status= implemented
plugin= hosts augeas keytometa
description= relative order in the keyset if non-alphabetical order
  is needed. This meta data is only to preserve order as found in
  the file. It is an hint to allow complete reconstruction as it
  was before.
  Keys without order meta data or keys with same order, yield
  implementation-defined ordering.
  When some knowledge about desired ordering exists, e.g. when
  key sets are merged, the keys should to be reordered to avoid
  this.
note= this will rarely used within specifications, but is directly
  derived from configuration files.

[comment]
type= string
status= implemented
plugin= hosts (keytometa)
description= the users comment about the key (mostly its value)
  the first line is the comment after a key/value
  further lines are the lines before a key/value
note= this will rarely used within specifications, but rather directly
  in configuration files.

#
# Information about the key's value
#


[check/type]
type= string
status= implemented
plugin= type
description= defines the type of the value, as specified in CORBA.

[check/type/min]
type= int
status= implemented
plugin= type
description= defines the min value type of the integer value

[check/type/max]
type= int
status= implemented
plugin= type
description= defines the max value type of the integer value

[check/format]
type= string
status= idea
description= defines the format of the value

[check/path]
status= implemented
plugin= path
description= defines which file (path) the value referes to

[check/validation]
status= implemented
plugin= validation
type= regular expression
description= a regular expression to check against

[check/validation/message]
status= implemented
plugin= validation
description= a message added to warning if validation fails

[check/range]
status= idea
description= range checks, from-to, or arbitrary sets of numbers
see= check/type/min and check/type/max for already existing
  implementations


#
# Other information about keys=
#

[deprecated]
status= idea
description= Flag keys that will be removed in further versions
note= thanks to Config==Model for that idea

[shareable]
status= idea
description= Flag keys that should not be exported

[source]
status= idea
description= states where a key comes from if it is not from an ordinary
 persistent configuration. E.g.= hardware (queries)
 e.g. system/sw/xorg/current/monitor might have "source" metadata if it
 is queried from hardware and not from configuration file.

[dependency/control]
status= idea
description= control keys which enable/disable parameters

[dependency/value]
status= idea
description= specific values of the dependency key have impact on that key

[application/name]
status= idea
description= links a key to a application, so that it can be easily purged
 when the application is no longer installed.
 Note that this is only needed together with another option below like version.
 Typically purged keys can be found easily when no schema for it exists anymore.

[application/version]
status= idea
description= links a key to a specific set of version(s). Can be used to control
 purging even more specific

[restrict/write]
status= idea
description= avoid writing on the value of the key, it still can be removed

[restrict/remove]
status= idea
description= avoid removal of key (needs schema-checker to read key)

[final]
status= idea
plugin= merger
description= do not allow the key to be overwritten by a merger plugin

[evaluate/<language>]
type= program code
status= idea
plugin= evaluater
description= evaluate expression to check if key should be included, program should
 abort or however evalute plugin is configured

[uid]
status= currently obsolete
type= time
description= The owner of the key.

[gid]
status= currently obsolete
type= time
description= The group of the key.

[mode]
status= currently obsolete
type= int
description= The access mode of the key.

[atime]
type= time
status= currently obsolete
description= The time when the key was last accessed.

[mtime]
type= time
status= currently obsolete
description= The time when the value of a key were last modified.

[ctime]
type= time
status= currently obsolete
description= The time when the meta data of a key were last modified.






#
# Reserved names, not to be used by meta data
#

[user]
description= to not avoid meta keys with standard user keys, no meta key name must begin with user

[system]
description= to not avoid meta keys with standard system keys, no meta key name must begin with system

[spec]
description= to not avoid meta keys with standard spec keys, no meta key name must begin with spec

[local]
description= to not avoid meta keys with standard local keys, no meta key name must begin with local




# The following proposal may supersede/complement the previous comment,
# because it allows:
# - to restore formatting, including:
#  - inline comments
#  - spaces before comments
#  - empty lines
# - to distinguish between different kinds of comments and empty lines
# - to tag every single comment line, which increases extensibility
#
# It needs, however, an API so that the user is not required to fiddle
# with all these details.

[comment/#]
status= idea
type = string
description= comment line preceding an actual key
 Except #0, which is the inline key (in the same line).
 The comment numbering starts from top to bottom. The comment
 directly above the key is the last entry in the array and
 the topmost comment belonging to the key is #1.
 Comment keys that are not above any key (comments in the last
 lines of files) are added to the parentkey.

[comment/#/start]
status= idea
type= string
description= determines the character used to start this line of comment
 None if its an empty line

[comment/#/space]
status= idea
type= string
description= the space used between a comment and the beginning of the
 line or after end of payload data (for inline comments)
 If no start token was found, only space and no comment is present.
