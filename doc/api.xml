<section id="api"><title>Application Programing Interface</title>
	<para>Registry's API consists of 3 classes of objects and methods to manipulate them. The main implementation of the library is written in C.</para>
	<para>The classes are:</para>
	<variablelist>
		<varlistentry><term><type>Key</type></term>
			<listitem><simpara>The obvious entity class. Contains key's name, data and metadata. Example of its methods are <function>keyInit</function>, <function>keySetName</function>, <function>keySetUID</function>, <function>keyGetString</function>, <function>keyIsDir</function>, etc.</simpara></listitem>
		</varlistentry>
		<varlistentry><term><type>KeySet</type></term>
			<listitem><simpara>A group of <type>Key</type>s. Real applications use to get and set several keys, and this class is used to store corelated keys that were retrieved together in one shot. Example of its methods are <function>ksInsert</function>, <function>ksAppend</function>, <function>ksInsertKeys</function>, etc.</simpara></listitem>
		</varlistentry>
		<varlistentry><term><type>Registry</type></term>
			<listitem><simpara>A class of static methods only. You can't instantiate an object of this class. All the business logic for retrieving and commiting key data to physical media is owned by this class. Example methods are <function>registrySetKey</function>, <function>registryGetKey</function>, <function>registryGetValue</function>, <function>registryGetChildKeys</function>, etc. This last is one of the most powerfull, returning a <type>KeySet</type> containing all child keys of a folder key, with the option to retrieve them recursively, sorted, dereferencing links, etc.</simpara></listitem>
		</varlistentry>
	</variablelist>
	<para>The API is documented in manual pages <citerefentry><refentrytitle>key</refentrytitle><manvolnum>3</manvolnum></citerefentry> and <citerefentry><refentrytitle>registry</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

	&apiexample;
	
</section>
