.\" ** You probably do not want to edit this file directly **
.\" It was generated using the DocBook XSL Stylesheets (version 1.69.1).
.\" Instead of manually editing it, you probably should edit the DocBook XML
.\" source for it and then use the DocBook XSL Stylesheets to regenerate it.
.TH "ELEKTRA" "7" "March 2004" "Elektra Initiative" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
elektra \- A framework to store configuration atoms hierarchically
Overview of the Elektra Project.PP
The Elektra Project provides an alternative back\-end for text configuration files.
.PP
Instead of each program to have its own text configuration files, with a variety of formats, Elektra tries to provide a universal, hierarchical, fast and consistent namespace and infrastructure to access configuration parameters through a key\-value pair mechanism. This way any software can read/save its configuration/state using a consistent API.
.PP
Being a common infrastructure, it also lets other softwares be aware of this application configurations, leveraging easy software integration.
.PP
It is designed to be lightweight, with no dependencies, ready to be used also by early boot stage programs.
.PP
Using Elektra, configuration file's syntax and handling will not be a rework for each software.
.PP
Elektra lets system administrators control security in a much fine grained way. With the current flat file paradigm it is impossible to control permissions and access times on each
\fI/etc/passwd\fR
or
\fI/etc/shadow\fR
atoms. Elektra lets you do that because each information atom stored in it (key) has a unique name (key name) and access properties. See
[1]\&\fIHans Reiser (creator of ReiserFS) comments about it\fR.
Library Linkage Architecture.PP
The Elektra library (\fIlibelektra.so\fR) has 2 layers: public methods and backend access, according to the following architecture (these pictures were taken from the
[2]\&\fIElektra presentation\fR):
.PP
.PP
When using local backends such as the filesys backend, all key access happens in the actual process space as bellow:
.PP
.PP
A remote daemon backend is also possible as noted bellow:
.PP

True Facts About Elektra.TP 3
\(bu
It is much more an agreement then a piece of software. Relation is 99% to 1%.
.TP
\(bu
It is a simple and consistent API to help software developers programatically store and retrieve global and user\-specific configuration parameters.
.TP
\(bu
All key\-value pairs are stored in clear\-text files, UTF\-8 encoded. All old charsets are also supported, with automatic transparent conversion to and from UTF\-8.
.TP
\(bu
API supports change notifications and multiple backends.
.TP
\(bu
It provides a unique namespace for all values. Anywhere, anytime, any program can preciselly access keys by their names. Security restrictions may obviously apply.
.TP
\(bu
It is designed to be secure and lightweight, to let even early boot\-stage programs like
\fB/sbin/init\fR
to use it, instead of
\fI/etc/inittab\fR
file.
.TP
\(bu
It is designed to be easy to administrate with regular command line tools like
\fBcat\fR,
\fBvi\fR,
\fBcp\fR,
\fBls\fR,
\fBln\fR. Its storage is 100% open.
.TP
\(bu
It tries to set distribution\-independent naming standards to store things like hardware configuration, networking, user's session configuration, system's mime\-types, parameters for kernel modules, etc, that are generally stored under
\fI/etc\fR.
.TP
\(bu
It requires existing software to be changed to use its API. This will substitute hundreds of configuration\-text\-file parsing code, into clear Elektra's API key\-value access methods.
.TP
\(bu
It is POSIX compliant. If it doesn't compile and run easily on some POSIX system, it should be easily modified to do so.
Elektra Is Not.TP 3
\(bu
Is NOT something that accesses SQL/relational databases.
.TP
\(bu
Is NOT an OS service that can become unavailable and make system unusable. It is just a library to access files according to a namespace.
.TP
\(bu
Is NOT an alternative to network information systems like LDAP or NIS. These are still required for networked environments.
.TP
\(bu
Is NOT a Webmin\-like or other GUI tool to be used by end users.
.TP
\(bu
Is NOT an additional software layer to edit/generate existing configuration files.
.TP
\(bu
Is NOT a "configuration system", because one can't be created by simply writing some code. A configuration system is an ecosystem, and the Elektra Project tries to help build one.
.TP
\(bu
It doesn't know a thing about the semantics of each data it stores.
Namespaces and Key Names.PP
All keys are organized in a hierarchical tree with 2 Namespaces (subtrees) as showed by the picture:
.PP
.TP
\fBsystem\fR
Contains all subsystems and global application keys/configuration. Equivalent to files under
\fI/etc\fR
directory.
.TP
\fBuser\fR
The current user's keys. Equivalent to the dotfiles in a user's
\fB$HOME\fR
directory. These keys are phisically stored under the owner user home directory. The many
\fIuser:\fR\fIusername\fR
in the picture shows the full name of those trees. Read about user domains bellow for more.
User Domains.PP
Different from the
\fIsystem\fR
namespace, the
\fIuser\fR
namespace is dynamic. For example, the key
\fIuser/env/PATH\fR
may have completely different values for users
\fIluciana\fR
and
\fIvaleria\fR. In this example, if
\fIvaleria\fR
wants to access this key at
\fIluciana\fR's space, it should refer to
\fIuser:luciana/env/PATH\fR. Access permissions apply.
.PP
User domains were implemented also to address situations when different user names (\fB$USER\fR) have same UID. So a user key is stored in his home directory based on the user name, not the UID.
Inactive Keys.PP
A great thing about text configuration files is that some configuration items can be there as an example, but inactive or commented. Elektra provides a very simple way to simulate this behavior: if the key name begins with a dot (.), it is considered inactive or commented. In real world applications, the Elektra API will ignore these keys by default, but the keys are still accessible if the developer wants to.
.PP
These are some keys that have inactive subtrees:
.TP 3
\(bu
\fIsystem/sw/XFree/InputDevice/.Mouse3/Driver\fR: All keys under
\fI.Mouse3/*\fR
subtree won't be read by default.
.TP
\(bu
\fIuser:valeria/env/env2/.PATH\fR: The
\fB$PATH\fR
environment variable
\fIwon't\fR
be set when
\fIvaleria\fR
login.
.TP
\(bu
\fIsystem/users/.louis/uid\fR: The entire
\fI.louis/*\fR
subtree is inactive. This is the same as commenting the user entry from a configuration file.
.PP
See bellow more examples of inactive keys.
Key Examples.PP
Here are some valid key names, and their values:
.PP
The Elektra keys of the combined
\fI/etc/passwd\fR
and
\fI/etc/shadow\fR
entry for user 'nobody' would look like:
.TP 3
\(bu
\fIsystem/users/nobody/uid\fR: 99
.TP
\(bu
\fIsystem/users/nobody/gid\fR: 99
.TP
\(bu
\fIsystem/users/nobody/gecos\fR: Nobody
.TP
\(bu
\fIsystem/users/nobody/home\fR: /
.TP
\(bu
\fIsystem/users/nobody/shell\fR: /sbin/nologin
.TP
\(bu
\fIsystem/users/nobody/password\fR: *
.TP
\(bu
\fIsystem/users/nobody/passwdChangeBefore\fR: 0
.TP
\(bu
\fIsystem/users/nobody/passwdChangeAfter\fR: 99999
.TP
\(bu
\fIsystem/users/nobody/passwdWarnBefore\fR: 7
.TP
\(bu
\fIsystem/users/nobody/passwdDisableAfter\fR:
.TP
\(bu
\fIsystem/users/nobody/passwdDisabledSince\fR:
.TP
\(bu
\fIsystem/users/nobody/passwdReserved\fR:
.PP
The environment variables I want set, when I log in, with their full key name:
.TP 3
\(bu
\fIuser:aviram/env/env1/JAVA_HOME\fR: /usr/lib/jvm/java\-1.4.1\-ibm\-1.4.1.0/jre
.TP
\(bu
\fIuser:aviram/env/env2/PATH\fR: $PATH:~/bin:$JAVA_HOME/bin
.TP
\(bu
\fIuser:aviram/env/env2/PS1\fR: \\h:\\w\\$
.TP
\(bu
\fIuser:aviram/env/env3/PILOTRATE\fR: 57600
.PP
The entry in
\fI/etc/inittab\fR
that is responsible for starting X11 would look:
.TP 3
\(bu
\fIsystem/init/x/runlevels\fR: 5
.TP
\(bu
\fIsystem/init/x/action\fR: respawn
.TP
\(bu
\fIsystem/init/x/process\fR: /etc/X11/prefdm \-nodaemon
.PP
The users database files and
\fI/etc/inittab\fR
were Elektrified to key\-value pairs using the
\fBusers\-convert\fR
and
\fBinittab\-convert\fR
scripts included with the distribution.
.PP
An example of an elektrified
\fI/etc/X11/xorg.conf\fR
or
\fI/etc/X11/XF86Config\fR:
.TP 3
\(bu
\fIsystem/sw/xorg/current/Layouts/Default Layout/Inputs/Keyboard0/CoreKeyboard\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Layouts/Default Layout/Inputs/Mouse0/CorePointer\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Layouts/Default Layout/Screens/Screen0/Absolute.x\fR: 0
.TP
\(bu
\fIsystem/sw/xorg/current/Layouts/Default Layout/Screens/Screen0/Absolute.y\fR: 0
.TP
\(bu
\fIsystem/sw/xorg/current/Layouts/Default Layout/Screens/Screen0/ScreenNumber\fR: 0
.TP
\(bu
\fIsystem/sw/xorg/current/Files/FontPath\fR: unix/:7100
.TP
\(bu
\fIsystem/sw/xorg/current/Files/RgbPath\fR: /usr/X11R6/lib/X11/rgb
.TP
\(bu
\fIsystem/sw/xorg/current/Devices/Videocard0/BoardName\fR: Intel 740 (generic)
.TP
\(bu
\fIsystem/sw/xorg/current/Devices/Videocard0/Driver\fR: i740
.TP
\(bu
\fIsystem/sw/xorg/current/Devices/Videocard0/VendorName\fR: Videocard vendor
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Keyboard0/Driver\fR: keyboard
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Keyboard0/Options/XkbLayout\fR: us_intl
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Keyboard0/Options/XkbModel\fR: pc105
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Mouse0/Driver\fR: mouse
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Mouse0/Options/Device\fR: /dev/input/mice
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Mouse0/Options/Emulate3Buttons\fR: yes
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Mouse0/Options/Protocol\fR: IMPS/2
.TP
\(bu
\fIsystem/sw/xorg/current/InputDevices/Mouse0/Options/ZAxisMapping\fR: 4 5
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/Monitor0/DisplaySize.height\fR: 230
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/Monitor0/DisplaySize.width\fR: 300
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/Monitor0/HorizSync\fR: 30.0 \- 61.0
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/Monitor0/ModelName\fR: SyncMaster
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/Monitor0/Options/dpms\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/Monitor0/VendorName\fR: Monitor Vendor
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/Monitor0/VertRefresh\fR: 56.0 \- 75.0
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/.Monitor1/HorizSync\fR: 30.0 \- 61.0
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/.Monitor1/ModelName\fR: Impression
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/.Monitor1/Options/dpms\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/.Monitor1/VendorName\fR: Monitor Vendor
.TP
\(bu
\fIsystem/sw/xorg/current/Monitors/.Monitor1/VertRefresh\fR: 56.0 \- 75.0
.TP
\(bu
\fIsystem/sw/xorg/current/Screens/Screen0/DefaultDepth\fR: 16
.TP
\(bu
\fIsystem/sw/xorg/current/Screens/Screen0/Device\fR: Videocard0
.TP
\(bu
\fIsystem/sw/xorg/current/Screens/Screen0/Displays/00/Depth\fR: 16
.TP
\(bu
\fIsystem/sw/xorg/current/Screens/Screen0/Displays/00/Modes\fR: 1024x768,800x600,640x480
.TP
\(bu
\fIsystem/sw/xorg/current/Screens/Screen0/Displays/00/Viewport.x\fR: 0
.TP
\(bu
\fIsystem/sw/xorg/current/Screens/Screen0/Displays/00/Viewport.y\fR: 0
.TP
\(bu
\fIsystem/sw/xorg/current/Screens/Screen0/Monitor\fR: Monitor0
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/dbe\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/dri\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/extmod\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/fbdevhw\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/freetype\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/glx\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/record\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/Modules/type1\fR:
.TP
\(bu
\fIsystem/sw/xorg/current/DRI/Group\fR: 0
.TP
\(bu
\fIsystem/sw/xorg/current/DRI/Mode\fR: 0666
.PP
Pay attention that the keys bellow
\fIsystem/sw/XFree/current/Monitor/.Monitor1\fR
are inactive because we have
\fI.Monitor1\fR
as their parent. So unless special options are used when calling the API, these keys will not be retrieved from the database.
.PP
Throughout this text you will see other examples of key names.
Key Data Types.PP
There are only two types of data that can be stored:
.TP
\fBText\fR
Handled as pure text. Regardeless of the charset being used, these values are always stored as UTF\-8. This ensures very strong internationalization and migration capabilities, while keeping simplicity. If you don't want the Elektra framework to convert your non\-ASCII text to UTF\-8 (not recomended), you should use the Binary data format.
.TP
\fBBinary\fR
A stream of bytes, not necessarily text. It is recommended that you avoid using binary values because UNIX system administrators tend to consider them as unmanageable blackboxes. Anyway, the value will be encoded into pure text format based on hexadecimal digits, for openness and ease of administration. This data type should also be avoided because it is less efficient.
.PP
There are very good reasons why types like
\fBInteger\fR,
\fBTime\fR,
\fBFont\fR,
\fBList\fR, etc were not implemented: Elektra was designed to be usefull for any type of program, so having more specific data types implicates in the definition of value limits, separators in the storage format, etc, that may be good for some application and bad for other. So the semantics of the data is handled by the application. A program or framework may define its own special data handling methods using these essential basic types. See the
\fBkeyGetType()\fR
and
\fBkeySetType()\fR
methods documentation in the
\fBkdb\fR(3)
man page to understand how to set keys with your own data types.
.PP
There are more two types of keys:
.TP
\fBDirectory\fR
It can't store a value, but, as a directory in a filesystem, it serves as a way to group correlated keys.
.TP
\fBLink\fR
It is a link to another key. They work as symbolic links in the filesystem: when trying to access them, you will actually access the key they point to. The API also provides ways to access these special keys without dereferencing them.
Key Meta Data.PP
Besides the key name and the value, each key has other attributes:
.TP
\fBOwner's User and Group\fR
This is a system's UID and GID equal to the ones found in regular files' attributes.
.TP
\fBAccess Permissions\fR
Filesystem\-like access permissions for user, group and others.
.TP
\fBModification, Access and Stat Times\fR
Last time a key was modified, readed and stated (listed), respectively.
.TP
\fBKey Comment\fR
Pretty much as a configuration file comment. Not intended to be used in GUI applications, because it isn't internationalizable.
Fine Grained Security Example.PP
To show this metadata in action, this screen shows the
\fBkdb\fR
command listing keys and their attributes related to user
\fInobody\fR.
.sp
.nf
bash$ \fBkdb ls \-Rlv system/users/nobody\fR
\-rw\-r\-\-r\-\-   root  root    17 Mar 31 09:07 system/users/nobody/uid=99
\-rw\-r\-\-r\-\-   root  root    17 Mar 31 09:07 system/users/nobody/gid=99
\-rw\-r\-\-r\-\-   root  root    21 Mar 31 09:07 system/users/nobody/gecos=Nobody
\-rw\-r\-\-r\-\-   root  root    16 Mar 31 09:07 system/users/nobody/home=/
\-rw\-r\-\-r\-\-   root  root    28 Mar 31 09:07 system/users/nobody/shell=/sbin/nologin
\-rw\-\-\-\-\-\-\-   root  root    16 Mar 31 09:07 system/users/nobody/password
\-rw\-\-\-\-\-\-\-   root  root    16 Mar 31 09:07 system/users/nobody/passwdChangeBefore
\-rw\-\-\-\-\-\-\-   root  root    20 Mar 31 09:07 system/users/nobody/passwdChangeAfter
\-rw\-\-\-\-\-\-\-   root  root    16 Mar 31 09:07 system/users/nobody/passwdWarnBefore
\-rw\-\-\-\-\-\-\-   root  root    15 Mar 31 09:07 system/users/nobody/passwdDisableAfter
\-rw\-\-\-\-\-\-\-   root  root    15 Mar 31 09:07 system/users/nobody/passwdDisabledSince
\-rw\-\-\-\-\-\-\-   root  root    15 Mar 31 09:07 system/users/nobody/passwdReserved
			
.fi
.PP
We ran the
\fBkdb\fR
command without super\-user credentials, asking for long (\fB\-l\fR), recursive (\fB\-R\fR) listing, and to show each key value (\fB\-v\fR). But (since we are) regular user, we don't have permission to see the values of the
\fIsystem/users/nobody/passwd*\fR
fields.
.PP
The users database files were elektrified to key\-value pairs using the
\fBusers\-convert\fR
script included with the distribution.
ExamplesSetting Keys.PP
bash$\fBkdb set \-c "My first key" user/example/key "Some nice value"\fR
.PP
bash$\fBkdb set user:luciana/example/key \-\- "Some \- nice \- value with dashes"\fR
.PP
bash#\fBKDB_ROOT=user:http/sw/httpd kdb set \-u nobody \-g http key "Some value"\fR
.PP
bash$\fBkdb set \-b image.png \-t bin user/example/binaryKey\fR
.PP
bash$\fBkdb set \-b file.txt user/example/regularKey\fR
.PP
bash#\fBkdb set \-t link system/sw/XFree/current system/sw/XFree/handmade\fR
Getting Keys.PP
bash$\fBKDB_ROOT=user/example kdb get key\fR
.PP
bash$\fBKDB_BACKEND=gconf kdb get user/sw/gnome\-terminal/global/active_encodings\fR
Listing.PP
bash$\fBkdb ls \-laR user:valeria\fR
.PP
bash$\fBkdb ls \-lR system/sw/xorg/current\fR
.PP
bash$\fBKDB_ROOT=system/sw kdb ls \-lR xorg\fR
.PP
bash$\fBKDB_BACKEND=fstab kdb ls \-Rv system/filesystems\fR
Miscelaneous.PP
bash#\fBkdb ln system/sw/xorg/handmade system/sw/xorg/current\fR
.PP
bash#\fBkdb mv system/sw/xorg/current system/sw/xorg/old\fR
.PP
bash#\fBkdb rm system/inittab/rc4\fR
.PP
bash$\fBKDB_BACKEND=gconf kdb rm user/gconfKey\fR
XML Import and Export.PP
bash#\fBkdb export user/sw/app | sed \-e 's|/app/|/app2/|g' | kdb import\fR
.PP
bash#\fBKDB_ROOT=system/sw kdb export myapp > myappconf.xml\fR
.PP
bash#\fBkdb import myappconf.xml\fR
.PP
bash$\fBKDB_BACKEND=gconf kdb export user/sw\fR
.SH "SEE ALSO"
.PP
\fBkdb\fR(1),
\fBelektra\fR(5)
.SH "AUTHOR"
Avi Alkalay <avi at unix.sh>. 
.SH "REFERENCES"
.TP 3
1.\ Hans Reiser (creator of ReiserFS) comments about it
\%http://namesys.com/v4/v4.html#etc_passwd
.TP 3
2.\ Elektra presentation
\%elektra.sxi
