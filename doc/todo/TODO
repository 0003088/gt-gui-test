This is a list of TODO items which do not fit in
the other TODO categories which should be resolved in 0.8.


== GENERATORS ==

C++ code generated as frontend 
	policy based (not available, conversion failed)
	make it really simple to type and structure safe access configuration
	allow notification+locking

generator for:
	exc classes
	try catch blocks
	as keyset
	human readable text




== CONTRACTS ==

add following configuration for storage plugins:
	use_absolute
	use_namespaces
	use_owner

if given use information inside file rather then parent key
if storage plugin cannot represent this information, make it as information only
give (hardcoded) defaults in contract
Warn on ignored settings -> But better to always check contract!! 
let those values be changed on mount/import/export


make plugins (backends) recursive

Plugins should state which metadata they can handle and which they can interpret or generate



== BINDINGS ==

c++:
	Keyset operator==

bindings: using swig
	python
	scheme
	java




== NOTIFICATION ==

get list of involved configuration files and do inotify on it



== DATA STRUCTURES ==

Only implement what is really needed.
(can take some time to do it well!)

ksForEach (ks, func, handle)
	void func (Key*, void* handle);

relations

ksLookup: value keys only
	with relations
	only in the same folder (sibling)
	only below the current folder (below)

merge + split configuration
http://en.wikipedia.org/wiki/Set_(mathematics)


KeySet* ksUnion
ksIntersection
ksMerge

http://en.wikipedia.org/wiki/Complement_(set_theory)
ksComplement (Difference, SymmetricDifference)


ksCopy -> ksAssign
ksPopCurrent

InsertIterator
	ksAppend() in O(1)
	KDB_O_NOALL could use binary search

AccessIterator
	not integrated
	ksCurrent only for iterator
	feature for error handling needed?
	functors and same level iterators build on top of it

KeySet as hash?


Transform to propertY tree
import or inherit from config
commandline parser?

