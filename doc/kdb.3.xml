<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
	<!ENTITY author SYSTEM "author.xml">
	<!ENTITY csource SYSTEM "csource.xml">
	<!ENTITY apiexample SYSTEM "apiexample.xml">
]>

<!--
$Id$
$LastChangedBy$
-->
<refentry id="registry">

	<refentryinfo>
		&author;
	</refentryinfo>

	<refmeta>
		<refentrytitle>kdb</refentrytitle>
		<manvolnum>3</manvolnum>
	</refmeta>

	<refnamediv>
		<refname>kdb</refname>
		<refpurpose>Linux Registry manipulation methods</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<funcsynopsis>
			<funcsynopsisinfo>#include &lt;kdb.h&gt;</funcsynopsisinfo>


			<funcprototype>
				<funcdef>int <function>kdbOpen</function></funcdef>
			</funcprototype>
			
			<funcprototype>
				<funcdef>int <function>kdbClose</function></funcdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbGetValue</function></funcdef>
				<paramdef>char *<parameter>keyName</parameter></paramdef>
				<paramdef>char *<parameter>returned</parameter></paramdef>
				<paramdef>size_t <parameter>maxSize</parameter></paramdef>
			</funcprototype>

						
			<funcprototype>
				<funcdef>int <function>kdbGetKeyByParent</function></funcdef>
				<paramdef>char *<parameter>parentName</parameter></paramdef>
				<paramdef>char *<parameter>basename</parameter></paramdef>
				<paramdef>Key *<parameter>returned</parameter></paramdef>
			</funcprototype>


			<funcprototype>
				<funcdef>int <function>kdbGetKeyByParentKey</function></funcdef>
				<paramdef>Key *<parameter>parent</parameter></paramdef>
				<paramdef>char *<parameter>basename</parameter></paramdef>
				<paramdef>Key *<parameter>returned</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbGetValueByParent</function></funcdef>
				<paramdef>char *<parameter>parentName</parameter></paramdef>
				<paramdef>char *<parameter>basename</parameter></paramdef>
				<paramdef>char *<parameter>returned</parameter></paramdef>
				<paramdef>size_t <parameter>maxSize</parameter></paramdef>
			</funcprototype>
			
			
			<funcprototype>
				<funcdef>int <function>kdbSetValue</function></funcdef>
				<paramdef>char *<parameter>keyName</parameter></paramdef>
				<paramdef>char *<parameter>value</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbSetValueByParent</function></funcdef>
				<paramdef>char *<parameter>parentName</parameter></paramdef>
				<paramdef>char *<parameter>basename</parameter></paramdef>
				<paramdef>char *<parameter>value</parameter></paramdef>
			</funcprototype>

			
			<funcprototype>
				<funcdef>int <function>kdbLink</function></funcdef>
				<paramdef>char *<parameter>target</parameter></paramdef>
				<paramdef>char *<parameter>newKeyName</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbRemove</function></funcdef>
				<paramdef>char *<parameter>keyName</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbGetComment</function></funcdef>
				<paramdef>char *<parameter>keyName</parameter></paramdef>
				<paramdef>char *<parameter>returned</parameter></paramdef>
				<paramdef>size_t <parameter>maxSize</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbSetComment</function></funcdef>
				<paramdef>char *<parameter>keyName</parameter></paramdef>
				<paramdef>char *<parameter>comment</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbStatKey</function></funcdef>
				<paramdef>Key *<parameter>key</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbGetKey</function></funcdef>
				<paramdef>Key *<parameter>key</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbSetKey</function></funcdef>
				<paramdef>Key *<parameter>key</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbGetChildKeys</function></funcdef>
				<paramdef>char *<parameter>parentKeyName</parameter></paramdef>
				<paramdef>KeySet *<parameter>returned</parameter></paramdef>
				<paramdef>unsigned long <parameter>options</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbSetKeys</function></funcdef>
				<paramdef>KeySet *<parameter>ks</parameter></paramdef>
			</funcprototype>

			<funcprototype>
				<funcdef>int <function>kdbGetRootKeys</function></funcdef>
				<paramdef>KeySet *<parameter>returned</parameter></paramdef>
			</funcprototype>

		</funcsynopsis>
	</refsynopsisdiv>
	
	<section id="registryMethodDescription"><title>Description</title>
		<para>These are methods to create, access and change keys and their values into the Linux Registry (see <citerefentry><refentrytitle>kdb</refentrytitle><manvolnum>7</manvolnum></citerefentry>). To make more detailed registry's key/value manipulation, the <function>key*()</function> methods are also available (see <citerefentry><refentrytitle>key</refentrytitle><manvolnum>3</manvolnum></citerefentry>).</para>
		<para>Before starting to access the Registry, you must call <function>kdbOpen</function>, and after finishing working with it, you can call <function>kdbClose</function>. After calling <function>kdbClose</function> you can still manipulate the Key objects you gathered, but you'll not be able to commit your changes. So the normal usage of the Registry is:</para>
		<orderedlist>
			<listitem><simpara>Call <function>kdbOpen</function>()</simpara></listitem>
			<listitem><simpara>Get and manipulate keys</simpara></listitem>
			<listitem><simpara>Call <function>kdbClose</function>() to free unused resources</simpara></listitem>
			<listitem><simpara>Work with the keys thrughout your application</simpara></listitem>
			<listitem><simpara><function>kdbOpen</function>(), save changed keys, <function>kdbClose</function>()</simpara></listitem>
		</orderedlist>
		<para><function>regitryGetChildKeys</function> is the best way to get all keys that matters to your application. It will look for keys hierarchically bellow <parameter>parentKeyName</parameter> and return a KeySet in <parameter>returned</parameter>. You can control the behavior ORing the following options:</para>
		<variablelist>
			<varlistentry><term>RG_O_RECURSIVE</term>
				<listitem><simpara>Retrieve also the keys under the child keys, recursively. The <citerefentry><refentrytitle>rg</refentrytitle><manvolnum>1</manvolnum></citerefentry> ls command, with switch -R uses this option.</simpara></listitem>
			</varlistentry>
			<varlistentry><term>RG_O_DIR</term>
				<listitem><simpara>By default, folder keys will not be returned because they don't have values and exist only to define hierarchy. Use this option if you need them to be included in the <parameter>returned</parameter> <type>KeySet</type>.</simpara></listitem>
			</varlistentry>
			<varlistentry><term>RG_O_NOVALUE</term>
				<listitem><simpara>Do not include in <parameter>returned</parameter> the regular value keys. The resulting <type>KeySet</type> will be only the skeleton of the tree.</simpara></listitem>
			</varlistentry>
			<varlistentry><term>RG_O_STATONLY</term>
				<listitem><simpara>Only <citerefentry><refentrytitle>stat</refentrytitle><manvolnum>2</manvolnum></citerefentry> the keys; do not retrieve the value, comment and key data type. The resulting keys will be empty and usefull only for informational purposes. The <citerefentry><refentrytitle>rg</refentrytitle><manvolnum>1</manvolnum></citerefentry> <option>ls</option> command, without the -v switch uses this option.</simpara></listitem>
			</varlistentry>
			<varlistentry><term>RG_O_INACTIVE</term>
				<listitem><simpara>Will make it not ignore inactive keys. So <parameter>returned</parameter> will be filled also with inactive keys. See <citerefentry><refentrytitle>kdb</refentrytitle><manvolnum>7</manvolnum></citerefentry> to understand how inactive keys work.</simpara></listitem>
			</varlistentry>
			<varlistentry><term>RG_O_SORT</term>
				<listitem><simpara>Will sort keys alphabetically by their names.</simpara></listitem>
			</varlistentry>
		</variablelist>
		<para><function>regitryGetChildKeys</function> returns zero (0) in case of success, or a negative number, and <varname>errno</varname> is set.</para>
		
		<para><function>kdbSetKeys</function> will save to disk the modified keys in <parameter>ks</parameter> KeySet.
		</para>
		
		<para><function>kdbGetValue</function> and <function>kdbSetValue</function> are shortcuts for getting and setting the <parameter>keyName</parameter> value. When <function>Get</function>ting, it will copy to <parameter>returned</parameter> the value of the <parameter>keyName</parameter> key, unless <parameter>maxSize</parameter> is smaller then the number of bytes (including NULL termination) of the key's value. Then <varname>errno</varname> is set to <constant>ENOBUFS</constant>. Or key data type is <type>Binary</type>, and <varname>errno</varname> is set to <constant>RG_KEY_RET_TYPEMISMATCH</constant>. When <function>Set</function>ting, it will check if <parameter>keyName</parameter> already exists. If so, permissions, key comment, etc will be kept. If not, the key will be created with current UID and GID, and access bits calculated from <citerefentry><refentrytitle>umask</refentrytitle><manvolnum>2</manvolnum></citerefentry>. <type>String</type> values are always stored as an UTF-8 encoded string, and the conversion is transparent and automatic. Both methods return negative values in case of failure (<varname>errno</varname> is set) or zero in case of success.</para>
		
		<para><function>kdbGetKeyByParent</function>, <function>kdbGetKeyByParentKey</function>, <function>kdbGetValueByParent</function>, <function>kdbSetValueByParent</function> have behavior similar to the above methods, and are provided for convenience. The desired key is formed by a parent name or key and a base name, so they'll internally concatenate the parent's and <parameter>baseName</parameter>.</para>

		<para><function>kdbLink</function> will create a symbolic link key as <parameter>keyName</parameter> pointing to <parameter>target</parameter>. If <parameter>target</parameter> begins with <filename>system</filename> or <filename>user</filename> or wathever is returned by <function>kdbGetRootKeys</function>, it is treated as a key name and translations apply. Otherwise, is is considered as a regular file path that can be absolute or relative.</para>
		
		<para><function>kdbRemove</function> will try to remove the <parameter>keyName</parameter> key. It may fail due to permissions, or key inexistence. Removing a <type>link</type> key will remove the link and not the real key. On success, zero is returned, otherwise -1 and <varname>errno</varname> is set to whatever <citerefentry><refentrytitle>unlink</refentrytitle><manvolnum>2</manvolnum></citerefentry> or <citerefentry><refentrytitle>rmdir</refentrytitle><manvolnum>2</manvolnum></citerefentry> set it.</para>
		
		<para><function>kdbGetComment</function> and <function>kdbSetComment</function> act in the comment part of <parameter>keyName</parameter> (see <citerefentry><refentrytitle>kdb</refentrytitle><manvolnum>7</manvolnum></citerefentry>, section Key Meta Data). If <parameter>keyName</parameter> already exists it will keep everything but the comment untouched. If it doesn't, the key will be created. The comment is always stored as an UTF-8 encoded text. This is completely transparent for the application.</para>
		
		<para><function>kdbGetKey</function> receives the <parameter>key</parameter> object with the key name already set. It will look for it in the Registry, and fill it up with the key data and attributes it finds. Memory will be allocated to store all the data gathered. After using <parameter>key</parameter>, memory can be freed calling <function>keyClose(key)</function>. On success, 0 is returned. -1 is returned on some failure, and <varname>errno</varname> is set to indicate the error. This methods are used when a more refined key manipulation actions must be done later with the key*() methods (see <citerefentry><refentrytitle>key</refentrytitle><manvolnum>3</manvolnum></citerefentry>). Otherwise <function>kdbGetValue</function> may be prefered.</para>
		
		<para>The <function>kdbStatKey</function> works in the same way, but the key is only stated. The <parameter>key</parameter> object will be filled only with UID, GID, access and modification times, access permissions. Nothing will be gathered regarding data type, key value and key comment.</para>
		
		<para><function>kdbSetKey</function> will write the whole info from <parameter>key</parameter> to the physical storage. If the refered key already exists, it will be completely overwrited, including access permissions, UID, GID and comment. Note that only the super user can physically change things like the UID of a key. On success, 0 is returned, otherwise -1, and <varname>errno</varname> is set.</para>
		
		<para><function>kdbGetRootKeys</function> is a starting point for Registry browsers. It will fill <parameter>returned</parameter> with the root keys that represent the Namespaces. They are usually <varname>system</varname> and <varname>user</varname>. Returns 0 on success, or -1 and <varname>errno</varname> is set.</para>
	</section>
	
	&apiexample;
	
	<refsection><title>See Also</title>
		<para><citerefentry><refentrytitle>key</refentrytitle><manvolnum>3</manvolnum></citerefentry>, <citerefentry><refentrytitle>registry</refentrytitle><manvolnum>5</manvolnum></citerefentry>, <citerefentry><refentrytitle>registry</refentrytitle><manvolnum>7</manvolnum></citerefentry></para>
	</refsection>
	
	
</refentry>
 
