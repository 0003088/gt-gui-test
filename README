License
-------
Since version 0.4.1, Elektra must be distributed under a BSD license.
Before that, Elektra was LGPL.




Compiling and Packaging
-----------------------
Elektra is such a simple software that you'll probably wont need to recompile
it from source. Use the binary RPM from the main repository. It should
work for any RPM based distribution.

Building on RPM-based distros:
Avoid using the tarball. Use the source RPM instead because it contains all the
logic to correctly build Elektra:

  $ rpm --rebuild elektra-*.src.rpm

This will generate RPMs in your packages directory, ready to be installed.

Building on deb-based distros:
You can use the deb Package from the main repository. It works for Debian
stable and distros based on it. You can also build the Debian Package
out of the sources, using dpkg-buildpackage -rfakeroot. It is not possible
to build the man-pages with Debian, see below.

On non-RPM and non-deb systems, use the tarball. Do not use the fresh files
from the Subversion repository since they contain only useless templates for
some files.


It was reported that the Makefiles will only work with gmake, which makes
absolutelly no difference for Linux, but is a crucial information when
building on BSD.

See the "Makefile" session bellow for some notes on building.





Compile Options
---------------

These are the parameters you can pass to 'make [PARAMETERS] all':

- BACKENDS="filesys fstab ini gconf"
  The list of backends you want to build. You can remove some of these
  backends if you don't want it.

- DEFAULT_BACKEND=filesys
  Selects the default backend that will be hardcoded in the runtime.
  Elektra needs to know which backend to use as default, but the user will
  allways be able to change it manipulating environment vars.

- DIRS="src xmldtd xmlschema doc"
  Tells make which components to build. You can exclude "doc" from this list
  to skip doc building.


The following example will comile only the "filesys" and "gconf" backends, and
make the "filesys" be the default:

   $ make    BACKENDS="filesys gconf"   DEFAULT_BACKEND=filesys   all


You can issue the following subcomands to make:

- make or make all
  Make everything, from compiling code to creating man pages.

- make install
  Installs everything under / or under what is defined in DESTDIR.
  Possible use: make DESTDIR=/some/parent/folder install

- make clean
  Clean everything that is not the original pure code.

- make commit
  To commit changes to the Subversion repository.

- make vtag
  Creates a version tag in the Subversion repository.

- make dist
  Generates the tarball in parent directory, using VERSION file.

- make rpm
  Makes tarball, compiles and generate Elektra RPMs

- make deb
  Makes tarball, compiles and generate Elektra Debian .debs


Under the doc/ folder, you can make:

- make or make all or make man
  Create the man files and doxygen

- make doxygen
  Create doxygen API documentation and API man files

- make man
  Create man files, doxygen and xsltproc

- make clean
  Removes everything that was generated

- make install
  Installs everything using ${DESTDIR} as root directory

- make html
  To create the HTML files for the elektra.sf.net website

- make pub
  Publish all documentation to elektra.sf.net

- make pubh
  Publish only HTML files. No doxygen, no images.

- make pubi
  Publish only image files


To all makes, you can pass parameters to define installation directories
and optimizations.
This is an example of how we call it from a full RPM build:

gmake OPTIMIZATIONS="$RPM_OPT_FLAGS" \
	%{?_smp_mflags} \
	DESTDIR=$RPM_BUILD_ROOT \   # / (default)
	UBINDIR=%{_bindir} \        # /usr/bin
	ULIBDIR=%{_libdir} \        # /usr/lib
	CONFDIR=%{_sysconfdir} \    # /etc
	INCDIR=%{_includedir} \     # /usr/include
	DOCDIR=%{_docdir} \         # /usr/share/doc
	MANDIR=%{_mandir} \         # /usr/share/man
	SGMLDIR=%{_datadir}/sgml \  # /usr/share/sgml
	install

You can also edit the Makefile for your special needs.





Notes for Packagers
-------------------
Elektra is divided in 2 packages: "elektra" and "elektra-devel".

The "elektra" package sugested files:
   /bin/kdb
   /etc/profile.d/elektraenv.sh
   /lib/libkdb.so*
   /lib/libkdbtools.so*
   /lib/libkdb-*.so      (backends)
   /lib/libregistry.so   (backwards compatibility: will be removed in future)
   /usr/share/doc/elektra
   /usr/share/doc/elektra/fstab-convert
   /usr/share/doc/elektra/hosts-convert
   /usr/share/doc/elektra/hwconfKudzu-convert
   /usr/share/doc/elektra/inittab-convert
   /usr/share/doc/elektra/network-convert
   /usr/share/doc/elektra/users-convert
   /usr/share/doc/elektra/xfree-convert
   /usr/share/man/man1/kdb.1.gz
   /usr/share/man/man5/elektra.5.gz
   /usr/share/man/man7/elektra.7.gz
   /usr/share/sgml/elektra-0.1.1
   /usr/share/sgml/elektra-0.1.1/catalog
   /usr/share/sgml/elektra-0.1.1/elektra.dtd
   /usr/share/sgml/elektra-0.1.1/elektra.xsd


The "elektra-devel" package sugested files:
   /usr/include/kdb.h          (main include)
   /usr/include/kdbtools.h     (higher level functions)
   /usr/include/kdbbackend.h   (backend development)
   /usr/include/kdbprivate.h   (used by kdbbackend.h)
   /usr/lib/libkdb.a
   /usr/share/doc/elektra-devel
   /usr/share/doc/elektra-devel/backend-template/*  (backend development examples)
   /usr/share/doc/elektra-devel/elektra-api/*  (Doxygen API documentation)
   /usr/share/doc/elektra-devel/examples/*     (Many examples in C language)
   /usr/share/man/man3/kdb*.3.gz       (Manpages for the kdb*() methods)
   /usr/share/man/man3/key*.3.gz       (Manpages for the key*() methods)
   /usr/share/man/man3/ks*.3.gz        (Manpages for the ks*() methods)

   
   
Usually you should build it like this:

   bash$ gmake all
   bash$ gmake DESTDIR=/some/fake/system/root install

For more info, please use the elektra.spec file as a reference.

It is recommended to provide a tool like update-libkdb, to make it
safe for admins to change the backend. See under 
scripts/update-backend an idea how the script could look like. Of
course it has to be adopted for your distributions need.




Building Documentation and Man Pages from Doxygen and DocBook
-------------------------------------------------------------
Doxygen is needed for API documentation, and the xsltproc program (from
libxslt) with DocBook XSL Stylesheets are needed for some other man pages.
On Red Hat/Fedora systems, the DocBook stylesheets can be found under
the folder /usr/share/sgml/docbook/xsl-stylesheets and where installed by
the docbook-style-xsl RPM. Please find this tools on your system for
documentation building.

Since version 0.2.7, the compiled man pages are included in the tarball. So
unless you 'make clean' globally, you'll be able to 'make; make install'
globaly even without these tools.
