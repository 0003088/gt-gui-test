      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="needs"></a>2. Why Linux Needs to be Elektrified</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>Today's GNU/Linux systems (or other UNIX) are a sum of independent components collected in a bazar. Each of them already have a working, but selfish configuration system. Please read this section thinking about a system as a whole, not a sum of many parts.</p>
        <p>The Elektra Initiative tries to upgrade a '1+1=2' system into a '1*1=1' one.</p>
        <p>Look into <tt class="filename">/etc/fstab</tt> file. Now look into <tt class="filename">/etc/modules.conf</tt>, <tt class="filename">/etc/passwd</tt>, <tt class="filename">/etc/ssh/sshd_config</tt>, <tt class="filename">/etc/httpd/conf/httpd.conf</tt>. I see here two terrible problems:</p>
        <div class="orderedlist">
          <ol type="1">
            <li>
              <p>They don't have a common file format.</p>
            </li>
            <li>
              <p>Their location in the filesystem may be different from Linux distribution to distribution.</p>
            </li>
          </ol>
        </div>
        <p>These 2 issues leverages other problems:</p>
        <div class="orderedlist">
          <ol type="1">
            <li>
              <p>When two different softwares want to integrate themselves, it is programatically very hard to read, understand and correctly change its partner's configuration file. Think about installing a third-party video driver in XFree86, a new Apache plug-in, etc, and letting this new piece of software do the integration automatically, instead of the sysadmin <span><b class="command">vi</b></span> the configuration file, understand and change it in the right way. So basic software integration is a pain today for ISVs (Independent Software Vendors).</p>
            </li>
            <li>
              <p>A software developer must waste a lot of time to write the plumbing code for configuration file parsing etc. It is completelly out of his scope to write code to interoperate with other software's configurations files.</p>
            </li>
            <li>
              <p>Different distributions tend to place different software configuration in different places with different formats. A regular SuSE system administrator, for example, will be lost when asked to work in a Debian or Slackware system. Think about the most primitive example: network configuration parameters. Each distro has its own approach.</p>
            </li>
            <li>
              <p>A system administrator must know all these formats.</p>
            </li>
            <li>
              <p>There is no way to know today what was changed in a specific configuration file. If <tt class="filename">/etc/shadow</tt> file time changes, there is no way to know if the change was related to nobody's or root's record.</p>
            </li>
            <li>
              <p>High-level system administration GUIs (webmin, redhat-config-*, SuSE's YAST, etc) are just a dream today. They can never track successfully all the changes that happens in the format of the configuration files of such a rich diversity of Open Source software (<tt class="filename">httpd.conf</tt>, <tt class="filename">smb.conf</tt>, <tt class="filename">modules.conf</tt>, <tt class="filename">fstab</tt>, etc, etc, etc). The approach of some of them is to keep the configuration ideas in a private database and regenerate the specific configuration file whenever a change happens in this database. Welcome to the inconsistency nightmare.</p>
            </li>
          </ol>
        </div>
        <p>Other OSes solved this problem by centralizing their configurations, and creating a framework to access them. Configurations then are no more represented by 'configuration files', but by <span class="emphasis"><em>key-value pairs</em></span> organized in a structured tree commited to some naming convetions.</p>
        <p>To achieve multi-vendor/provider consistent software integration, and ease of administration across heterogeneous Linux distributions,  Linux needs a key-value pair mechanism to store its configurations.</p>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="overview"></a>3. Overview of the Elektra Project</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>The Elektra Project provides an alternative back-end for text configuration files.</p>
        <p>Instead of each program to have its own text configuration files, with a variety of formats, Elektra tries to provide a universal, hierarchical, fast and consistent namespace and infrastructure to access configuration parameters through a key-value pair mechanism. This way any software can read/save its configuration/state using a consistent API.</p>
        <p>Being a common infrastructure, it also lets other softwares be aware of this application configurations, leveraging easy software integration.</p>
        <p>It is designed to be lightweight, with no dependencies, ready to be used also by early boot stage programs.</p>
        <p>Using Elektra, configuration file's syntax and handling will not be a rework for each software.</p>
        <p>Elektra lets system administrators control security in a much fine grained way. With the current flat file paradigm it is impossible to control permissions and access times on each <tt class="filename">/etc/passwd</tt> or <tt class="filename">/etc/shadow</tt> atoms. Elektra lets you do that because each information atom stored in it (key) has a unique name (key name) and access properties. See <a href="http://namesys.com/v4/v4.html#etc_passwd" target="_top">Hans Reiser (creator of ReiserFS) comments about it</a>.</p>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="libarchitecture"></a>3.1. Library Linkage Architecture</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>The Elektra library (<tt class="filename">libelektra.so</tt>) has 2 layers: public methods and backend access, according to the following architecture (these pictures were taken from the <a href="elektra.sxi" target="_top">Elektra presentation</a>):</p>
          <div align="center">
            <img src="pic/genericarch.png" align="middle" alt="carch" />
          </div>
          <p>When using local backends such as the filesys backend, all key access happens in the actual process space as bellow:</p>
          <div align="center">
            <img src="pic/localbacks.png" align="middle" alt="backs" />
          </div>
          <p>A remote daemon backend is also possible as noted bellow:</p>
          <div align="center">
            <img src="pic/daemonback.png" align="middle" alt="deamon" />
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="rgfacts"></a>3.2. True Facts About Elektra</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="itemizedlist">
            <ul type="disc">
              <li>
                <p>It is much more an agreement then a piece of software. Relation is 99% to 1%.</p>
              </li>
              <li>
                <p>It is a simple and consistent API to help software developers programatically store and retrieve global and user-specific configuration parameters.</p>
              </li>
              <li>
                <p>All key-value pairs are stored in clear-text files, UTF-8 encoded. All old charsets are also supported, with automatic transparent conversion to and from UTF-8.</p>
              </li>
              <li>
                <p>API supports change notifications and multiple backends.</p>
              </li>
              <li>
                <p>It provides a unique namespace for all values. Anywhere, anytime, any program can preciselly access keys by their names. Security restrictions may obviously apply.</p>
              </li>
              <li>
                <p>It is designed to be secure and lightweight, to let even early boot-stage programs like <span><b class="command">/sbin/init</b></span> to use it, instead of <tt class="filename">/etc/inittab</tt> file.</p>
              </li>
              <li>
                <p>It is designed to be easy to administrate with regular command line tools like <span><b class="command">cat</b></span>, <span><b class="command">vi</b></span>, <span><b class="command">cp</b></span>, <span><b class="command">ls</b></span>, <span><b class="command">ln</b></span>. Its storage is 100% open.</p>
              </li>
              <li>
                <p>It tries to set distribution-independent naming standards to store things like hardware configuration, networking, user's session configuration, system's mime-types, parameters for kernel modules, etc, that are generally stored under <tt class="filename">/etc</tt>.</p>
              </li>
              <li>
                <p>It requires existing software to be changed to use its API. This will substitute hundreds of configuration-text-file parsing code, into clear Elektra's API key-value access methods.</p>
              </li>
              <li>
                <p>It is POSIX compliant. If it doesn't compile and run easily on some POSIX system, it should be easily modified to do so.</p>
              </li>
            </ul>
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="rgnot"></a>3.3. Elektra Is Not</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="itemizedlist">
            <ul type="disc">
              <li>
                <p>Is NOT something that accesses SQL/relational databases.</p>
              </li>
              <li>
                <p>Is NOT an OS service that can become unavailable and make system unusable. It is just a library to access files according to a namespace.</p>
              </li>
              <li>
                <p>Is NOT an alternative to network information systems like LDAP or NIS. These are still required for networked environments.</p>
              </li>
              <li>
                <p>Is NOT a Webmin-like or other GUI tool to be used by end users.</p>
              </li>
              <li>
                <p>Is NOT an additional software layer to edit/generate existing configuration files.</p>
              </li>
              <li>
                <p>Is NOT a "configuration system", because one can't be created by simply writing some code. A configuration system is an ecosystem, and the Elektra Project tries to help build one.</p>
              </li>
              <li>
                <p>It doesn't know a thing about the semantics of each data it stores.</p>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="namespace"></a>4. Namespaces and Key Names</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>All keys are organized in a hierarchical tree with 2 Namespaces (subtrees) as showed by the picture:</p>
        <div align="center">
          <img src="pic/roots.png" align="middle" alt="roots" />
        </div>
        <div class="variablelist">
          <dl>
            <dt>
              <span class="term">
                <span class="type">system</span>
              </span>
            </dt>
            <dd>
              <p>Contains all subsystems and global application keys/configuration. Equivalent to files under <tt class="filename">/etc</tt> directory.</p>
            </dd>
            <dt>
              <span class="term">
                <span class="type">user</span>
              </span>
            </dt>
            <dd>
              <p>The current user's keys. Equivalent to the dotfiles in a user's <tt class="envar">$HOME</tt> directory. These keys are phisically stored under the owner user home directory. The many <tt class="filename">user:</tt><i class="replaceable"><tt>username</tt></i> in the picture shows the full name of those trees. Read about user domains bellow for more.</p>
            </dd>
          </dl>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="userdomains"></a>4.1. User Domains</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>Different from the <tt class="filename">system</tt> namespace, the <tt class="filename">user</tt> namespace is dynamic. For example, the key <tt class="filename">user/env/PATH</tt> may have completely different values for users <i class="replaceable"><tt>luciana</tt></i> and <i class="replaceable"><tt>valeria</tt></i>. In this example, if <i class="replaceable"><tt>valeria</tt></i> wants to access this key at <i class="replaceable"><tt>luciana</tt></i>'s space, it should refer to <tt class="filename">user:luciana/env/PATH</tt>. Access permissions apply.</p>
          <p>User domains were implemented also to address situations when different user names (<tt class="envar">$USER</tt>) have same UID. So a user key is stored in his home directory based on the user name, not the UID.</p>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="inactivekey"></a>4.2. Inactive Keys</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>A great thing about text configuration files is that some configuration items can be there as an example, but inactive or commented. Elektra provides a very simple way to simulate this behavior: if the key name begins with a dot (.), it is considered inactive or commented. In real world applications, the Elektra API will ignore these keys by default, but the keys are still accessible if the developer wants to.</p>
          <p>These are some keys that have inactive subtrees:</p>
          <div class="itemizedlist">
            <ul type="disc">
              <li><tt class="filename">system/sw/XFree/InputDevice/.Mouse3/Driver</tt>: All keys under <tt class="filename">.Mouse3/*</tt> subtree won't be read by default.</li>
              <li><tt class="filename">user:valeria/env/env2/.PATH</tt>: The <tt class="envar">$PATH</tt> environment variable <span class="emphasis"><em>won't</em></span> be set when <i class="replaceable"><tt>valeria</tt></i> login.</li>
              <li><tt class="filename">system/users/.louis/uid</tt>: The entire <tt class="filename">.louis/*</tt> subtree is inactive. This is the same as commenting the user entry from a configuration file.</li>
            </ul>
          </div>
          <p>See bellow more examples of inactive keys.</p>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="keyexamples"></a>4.3. Key Examples</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>Here are some valid key names, and their values:</p>
          <p>The Elektra keys of the combined <tt class="filename">/etc/passwd</tt> and <tt class="filename">/etc/shadow</tt> entry for user 'nobody' would look like:</p>
          <div class="itemizedlist">
            <ul type="disc">
              <li><tt class="filename">system/users/nobody/uid</tt>: 99</li>
              <li><tt class="filename">system/users/nobody/gid</tt>: 99</li>
              <li><tt class="filename">system/users/nobody/gecos</tt>: Nobody</li>
              <li><tt class="filename">system/users/nobody/home</tt>: /</li>
              <li><tt class="filename">system/users/nobody/shell</tt>: /sbin/nologin</li>
              <li><tt class="filename">system/users/nobody/password</tt>: *</li>
              <li><tt class="filename">system/users/nobody/passwdChangeBefore</tt>: 0</li>
              <li><tt class="filename">system/users/nobody/passwdChangeAfter</tt>: 99999</li>
              <li><tt class="filename">system/users/nobody/passwdWarnBefore</tt>: 7</li>
              <li><tt class="filename">system/users/nobody/passwdDisableAfter</tt>: </li>
              <li><tt class="filename">system/users/nobody/passwdDisabledSince</tt>: </li>
              <li><tt class="filename">system/users/nobody/passwdReserved</tt>: </li>
            </ul>
          </div>
          <p>The environment variables I want set, when I log in, with their full key name:</p>
          <div class="itemizedlist">
            <ul type="disc">
              <li><tt class="filename">user:aviram/env/env1/JAVA_HOME</tt>: /usr/lib/jvm/java-1.4.1-ibm-1.4.1.0/jre</li>
              <li><tt class="filename">user:aviram/env/env2/PATH</tt>: $PATH:~/bin:$JAVA_HOME/bin</li>
              <li><tt class="filename">user:aviram/env/env2/PS1</tt>: \h:\w\$ </li>
              <li><tt class="filename">user:aviram/env/env3/PILOTRATE</tt>: 57600</li>
            </ul>
          </div>
          <p>The entry in <tt class="filename">/etc/inittab</tt> that is responsible for starting X11 would look:</p>
          <div class="itemizedlist">
            <ul type="disc">
              <li><tt class="filename">system/init/x/runlevels</tt>: 5</li>
              <li><tt class="filename">system/init/x/action</tt>: respawn</li>
              <li><tt class="filename">system/init/x/process</tt>: /etc/X11/prefdm -nodaemon</li>
            </ul>
          </div>
          <p>The users database files and <tt class="filename">/etc/inittab</tt> were Elektrified to key-value pairs using the <span><b class="command">users-convert</b></span> and <span><b class="command">inittab-convert</b></span> scripts included with the distribution.</p>
          <p>An example of an elektrified <tt class="filename">/etc/X11/xorg.conf</tt> or <tt class="filename">/etc/X11/XF86Config</tt>:</p>
          <div class="itemizedlist">
            <ul type="disc">
              <li><tt class="filename">system/sw/xorg/current/Layouts/Default Layout/Inputs/Keyboard0/CoreKeyboard</tt>:</li>
              <li><tt class="filename">system/sw/xorg/current/Layouts/Default Layout/Inputs/Mouse0/CorePointer</tt>:</li>
              <li><tt class="filename">system/sw/xorg/current/Layouts/Default Layout/Screens/Screen0/Absolute.x</tt>: 0</li>
              <li><tt class="filename">system/sw/xorg/current/Layouts/Default Layout/Screens/Screen0/Absolute.y</tt>: 0</li>
              <li><tt class="filename">system/sw/xorg/current/Layouts/Default Layout/Screens/Screen0/ScreenNumber</tt>: 0</li>
              <li><tt class="filename">system/sw/xorg/current/Files/FontPath</tt>: unix/:7100</li>
              <li><tt class="filename">system/sw/xorg/current/Files/RgbPath</tt>: /usr/X11R6/lib/X11/rgb</li>
              <li><tt class="filename">system/sw/xorg/current/Devices/Videocard0/BoardName</tt>: Intel 740 (generic)</li>
              <li><tt class="filename">system/sw/xorg/current/Devices/Videocard0/Driver</tt>: i740</li>
              <li><tt class="filename">system/sw/xorg/current/Devices/Videocard0/VendorName</tt>: Videocard vendor</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Keyboard0/Driver</tt>: keyboard</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Keyboard0/Options/XkbLayout</tt>: us_intl</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Keyboard0/Options/XkbModel</tt>: pc105</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Mouse0/Driver</tt>: mouse</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Mouse0/Options/Device</tt>: /dev/input/mice</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Mouse0/Options/Emulate3Buttons</tt>: yes</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Mouse0/Options/Protocol</tt>: IMPS/2</li>
              <li><tt class="filename">system/sw/xorg/current/InputDevices/Mouse0/Options/ZAxisMapping</tt>: 4 5</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/Monitor0/DisplaySize.height</tt>: 230</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/Monitor0/DisplaySize.width</tt>: 300</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/Monitor0/HorizSync</tt>: 30.0 - 61.0</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/Monitor0/ModelName</tt>: SyncMaster</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/Monitor0/Options/dpms</tt>:</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/Monitor0/VendorName</tt>: Monitor Vendor</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/Monitor0/VertRefresh</tt>: 56.0 - 75.0</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/.Monitor1/HorizSync</tt>: 30.0 - 61.0</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/.Monitor1/ModelName</tt>: Impression</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/.Monitor1/Options/dpms</tt>:</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/.Monitor1/VendorName</tt>: Monitor Vendor</li>
              <li><tt class="filename">system/sw/xorg/current/Monitors/.Monitor1/VertRefresh</tt>: 56.0 - 75.0</li>
              <li><tt class="filename">system/sw/xorg/current/Screens/Screen0/DefaultDepth</tt>: 16</li>
              <li><tt class="filename">system/sw/xorg/current/Screens/Screen0/Device</tt>: Videocard0</li>
              <li><tt class="filename">system/sw/xorg/current/Screens/Screen0/Displays/00/Depth</tt>: 16</li>
              <li><tt class="filename">system/sw/xorg/current/Screens/Screen0/Displays/00/Modes</tt>: 1024x768,800x600,640x480</li>
              <li><tt class="filename">system/sw/xorg/current/Screens/Screen0/Displays/00/Viewport.x</tt>:  0</li>
              <li><tt class="filename">system/sw/xorg/current/Screens/Screen0/Displays/00/Viewport.y</tt>:  0</li>
              <li><tt class="filename">system/sw/xorg/current/Screens/Screen0/Monitor</tt>:  Monitor0</li>
              <li><tt class="filename">system/sw/xorg/current/Modules/dbe</tt>: </li>
              <li><tt class="filename">system/sw/xorg/current/Modules/dri</tt>: </li>
              <li><tt class="filename">system/sw/xorg/current/Modules/extmod</tt>: </li>
              <li><tt class="filename">system/sw/xorg/current/Modules/fbdevhw</tt>: </li>
              <li><tt class="filename">system/sw/xorg/current/Modules/freetype</tt>: </li>
              <li><tt class="filename">system/sw/xorg/current/Modules/glx</tt>: </li>
              <li><tt class="filename">system/sw/xorg/current/Modules/record</tt>: </li>
              <li><tt class="filename">system/sw/xorg/current/Modules/type1</tt>:</li>
              <li><tt class="filename">system/sw/xorg/current/DRI/Group</tt>: 0</li>
              <li><tt class="filename">system/sw/xorg/current/DRI/Mode</tt>: 0666</li>
            </ul>
          </div>
          <p>Pay attention that the keys bellow <tt class="filename">system/sw/XFree/current/Monitor/.Monitor1</tt> are inactive because we have <tt class="filename">.Monitor1</tt> as their parent. So unless special options are used when calling the API, these keys will not be retrieved from the database.</p>
          <p>Throughout this text you will see other examples of key names.</p>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="datatypes"></a>5. Key Data Types</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>There are only two types of data that can be stored:</p>
        <div class="variablelist">
          <dl>
            <dt>
              <span class="term">
                <span class="type">Text</span>
              </span>
            </dt>
            <dd>
              <p>Handled as pure text. Regardeless of the charset being used, these values are always stored as UTF-8. This ensures very strong internationalization and migration capabilities, while keeping simplicity. If you don't want the Elektra framework to convert your non-ASCII text to UTF-8 (not recomended), you should use the Binary data format.</p>
            </dd>
            <dt>
              <span class="term">
                <span class="type">Binary</span>
              </span>
            </dt>
            <dd>
              <p>A stream of bytes, not necessarily text. It is recommended that you avoid using binary values because UNIX system administrators tend to consider them as unmanageable blackboxes. Anyway, the value will be encoded into pure text format based on hexadecimal digits, for openness and ease of administration. This data type should also be avoided because it is less efficient.</p>
            </dd>
          </dl>
        </div>
        <p>There are very good reasons why types like <span class="type">Integer</span>, <span class="type">Time</span>, <span class="type">Font</span>, <span class="type">List</span>, etc were not implemented: Elektra was designed to be usefull for any type of program, so having more specific data types implicates in the definition of value limits, separators in the storage format, etc, that may be good for some application and bad for other. So the semantics of the data is handled by the application. A program or framework may define its own special data handling methods using these essential basic types. See the <tt class="function">keyGetType()</tt> and <tt class="function">keySetType()</tt> methods documentation in the  <span class="citerefentry"><span class="refentrytitle">kdb</span>(3)</span> man page to understand how to set keys with your own data types.</p>
        <p>There are more two types of keys:</p>
        <div class="variablelist">
          <dl>
            <dt>
              <span class="term">
                <span class="type">Directory</span>
              </span>
            </dt>
            <dd>
              <p>It can't store a value, but, as a directory in a filesystem, it serves as a way to group correlated keys.</p>
            </dd>
            <dt>
              <span class="term">
                <span class="type">Link</span>
              </span>
            </dt>
            <dd>
              <p>It is a link to another key. They work as symbolic links in the filesystem: when trying to access them, you will actually access the key they point to. The API also provides ways to access these special keys without dereferencing them.</p>
            </dd>
          </dl>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="metadata"></a>6. Key Meta Data</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>Besides the key name and the value, each key has other attributes:</p>
        <div class="variablelist">
          <dl>
            <dt>
              <span class="term">
                <span class="type">Owner's User and Group</span>
              </span>
            </dt>
            <dd>
              <p>This is a system's UID and GID equal to the ones found in regular files' attributes.</p>
            </dd>
            <dt>
              <span class="term">
                <span class="type">Access Permissions</span>
              </span>
            </dt>
            <dd>
              <p>Filesystem-like access permissions for user, group and others.</p>
            </dd>
            <dt>
              <span class="term">
                <span class="type">Modification, Access and Stat Times</span>
              </span>
            </dt>
            <dd>
              <p>Last time a key was modified, readed and stated (listed), respectively.</p>
            </dd>
            <dt>
              <span class="term">
                <span class="type">Key Comment</span>
              </span>
            </dt>
            <dd>
              <p>Pretty much as a configuration file comment. Not intended to be used in GUI applications, because it isn't internationalizable.</p>
            </dd>
          </dl>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="securityexample"></a>6.1. Fine Grained Security Example</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>To show this metadata in action, this screen shows the <span><b class="command">kdb</b></span> command listing keys and their attributes related to user <tt class="varname">nobody</tt>.</p>
          <pre class="screen"><tt class="prompt">bash$</tt> <span><b class="command">kdb ls -Rlv system/users/nobody</b></span>
-rw-r--r--   root  root    17 Mar 31 09:07 system/users/nobody/uid=99
-rw-r--r--   root  root    17 Mar 31 09:07 system/users/nobody/gid=99
-rw-r--r--   root  root    21 Mar 31 09:07 system/users/nobody/gecos=Nobody
-rw-r--r--   root  root    16 Mar 31 09:07 system/users/nobody/home=/
-rw-r--r--   root  root    28 Mar 31 09:07 system/users/nobody/shell=/sbin/nologin
-rw-------   root  root    16 Mar 31 09:07 system/users/nobody/password
-rw-------   root  root    16 Mar 31 09:07 system/users/nobody/passwdChangeBefore
-rw-------   root  root    20 Mar 31 09:07 system/users/nobody/passwdChangeAfter
-rw-------   root  root    16 Mar 31 09:07 system/users/nobody/passwdWarnBefore
-rw-------   root  root    15 Mar 31 09:07 system/users/nobody/passwdDisableAfter
-rw-------   root  root    15 Mar 31 09:07 system/users/nobody/passwdDisabledSince
-rw-------   root  root    15 Mar 31 09:07 system/users/nobody/passwdReserved
			</pre>
          <p>We ran the <span><b class="command">kdb</b></span> command without super-user credentials, asking for long (<tt class="option">-l</tt>), recursive (<tt class="option">-R</tt>) listing, and to show each key value (<tt class="option">-v</tt>). But (since we are) regular user, we don't have permission to see the values of the <tt class="filename">system/users/nobody/passwd*</tt> fields.</p>
          <p>The users database files were elektrified to key-value pairs using the <span><b class="command">users-convert</b></span> script included with the distribution.</p>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="bestpract"></a>7. Best Practices When Creating Keys</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>When using Elektra to store your application's configuration and state, please keep in mind the following rules:</p>
        <div class="itemizedlist">
          <ul type="disc">
            <li>
              <p>You are not allowed to create keys right under <tt class="filename">system</tt> or <tt class="filename">user</tt>.</p>
            </li>
            <li>
              <p>You are not allowed to create folder keys right under <tt class="filename">system</tt> or <tt class="filename">user</tt>. They are reserved for very essential OS subsystems.</p>
            </li>
            <li>
              <p>The keys for your application, called say <i class="replaceable"><tt>MyApp</tt></i>, should be created under <tt class="filename">system/sw/MyApp</tt> and/or <tt class="filename">user/sw/MyApp</tt>.</p>
            </li>
            <li>
              <p>It is suggested to make your application look for default keys under <tt class="filename">system/sw/MyApp/current</tt> and/or <tt class="filename">user/sw/MyApp/current</tt>. This way, from a sysadmin perspective, it will be possible to copy the <tt class="filename">system/sw/MyApp/current</tt> tree to something like <tt class="filename">system/sw/MyApp/old</tt>, and keep system clean and organized.</p>
            </li>
          </ul>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="garbage"></a>8. Unused/Old Keys Left Behind Into the Key Database</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>Old/uninstalled software may leave unused keys into the Elektra database. Actually, this can also happen with regular text configuration files. Garbage collection of keys and files is done by the package manager or the sysadmin. The Elektra API and the <span><b class="command">kdb</b></span> command line tool provide ways to find keys that were not accessed for a long time.</p>
        <p>When a user is removed from the system, his keys disapear when his <tt class="envar">$HOME</tt> dir is removed.</p>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="adoption"></a>9. Adoption by Legacy System Software</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>The benefits of Elektra will be felt only when configurations like those under <tt class="filename">/etc</tt> will move into it. It is expected that this will take time, but awareness should be raised in the community to speed the process.</p>
        <p>Experienced Unix sysadmins seem (and were expected to be) sceptical about a key-value database on Linux, even when the Elektra Initiative tries to address other OSes registry's problems (centralization, security, consistency). But it is a truly required OS component from a good architecture perspective, and it can solve most of the Linux software integration issues, when adopted.</p>
        <p>Elektra is expected to be adopted by developers of high-level software applications. Then by some Linux distribution specific admin tools, like redhat-config-network, then finally by main OS programs and libraries, like <span><b class="command">/sbin/init</b></span>, PAM, <span><b class="command">/bin/mount</b></span>, etc.</p>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="society"></a>10. A Society of Softwares, Bureocracy and Integration</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>Let's imagine that every Open Source project (and commercial software) out there are members of a society. They can't live alone each one in its own cave. XFree, Apache, Samba can't work without an OS, and an OS is useless without higher level software. KDE, Gnome need X. Nobody can think about setting up an Internet MTA without an anti-SPAM tool, and strong commercial anti-virus software. Apache needs third party plugins and extensions to add value to what it does. And all of them need a growing number of users to justify a purpose for them to exist.</p>
        <p>The way these members start to work together - and then really make the <span class="emphasis"><em>society</em></span> evolve - is through their configurations. As an example, an advanced commodity video card must say to X Window System: "Hey! I'm providing this driver and parameters, and I guarantee for you and your customer super exciting fast graphics!! Let me show you how to do that". And then X must say: "That's great! Please proceed making my customer happy, without taking his and <span class="emphasis"><em>my</em></span> time to show we can work together. And BTW lets make some co-marketing to advertise the value of our alliance."</p>
        <p>But the hypothetical conversation happening today is:</p>
        <p><span class="emphasis"><em>Commercial Driver:</em></span> "Hey, XFree, I'd like to reach your customers 'cause they like that 'F' word in your name. I'd put together some code to work with your supply chain specification (driver API), but you have such a big network of brokers (OS distros), and each one showed me its set of paper forms (configuration files) I have to fill to work with you."</p>
        <p><span class="emphasis"><em>XFree:</em></span> "Yeah, thats great. But look, I'm very focused now working on performance and architecture. You should really try to understand how each of these brokers work, and how to fill their forms."</p>
        <p><span class="emphasis"><em>Commercial Driver:</em></span> "Well, thats quite impossible because they are too many, and that's just too much bureocracy for me to handle. So I'll keep myself focused on that other broker that is so easy to plug-and-play. And the best I can do for you is to write a white paper for your customers, explaining how to use a text editor to get us working together. And BTW I'm not able to provide support, because I can't understand your ecosystem of brokers and users."</p>
        <p><span class="emphasis"><em>XFree:</em></span> "OK. That's life."</p>
        <p><span class="emphasis"><em>XFree Customer:</em></span> "Oh boy, why is this Video Driver I just bought so difficult to install and manage? Why is so easy to do that in my other partition? Why the driver installs itself so easily there, and it is so complicated here?"</p>
        <p>(this conversation received a considerable amount of drama, it is just an example, and this specific entities in real life may not have exactly the issues showed here)</p>
        <p>How many advanced Linux/*BSD/GNU user have been asked to help a newbie friend to setup his video card? I know plenty of them.</p>
        <p>Because of the Bazar-way of developing Open Source Software, each software project still dodn't agree in a common way to store configurations, so this part of the software is still like 20 years ago: a human-readable text file format that each project invented for itself. This makes them relatively easy to be managed by human beings, but not sociable at all in this hipotetical software society. It is programatically difficult to make different software have "social relations" in the current way configurations are handled. An application's configuration is its personality.</p>
        <div class="important" style="margin-left: 0.5in; margin-right: 1in;">
          <table border="0" summary="Important">
            <tr>
              <td rowspan="2" align="center" valign="top" width="25">
                <img alt="[Important]" src="pic/important.gif" />
              </td>
              <th align="left">Important</th>
            </tr>
            <tr>
              <td colspan="2" align="left" valign="top">
                <p>A key-value pair mechanism brings little or no additional value for a software that is using it to store its configurations/state. But it is vital to make it more "easy-going" in a society of softwares. This will benefit the society as a whole, and consequently all of its members.</p>
              </td>
            </tr>
          </table>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="compared"></a>11. Elektra Project and Other Registry-like Software</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>Known problems of other implementations are cited here.</p>
        <div class="orderedlist">
          <ol type="1">
            <li><span><b class="command">Other implementations are a single point of failure; if something makes them fail, they become unavailable system-wide</b></span>. Elektra is not a service. It can be seen as a mapper from the key's namespace to its physical location on the disk. If a key gets corrupted, it will not affect other keys, neither other users/programs accessing Elektra.</li>
            <li><span><b class="command">Very small applications must open their database to get values</b></span>. Elektra will only open very small files when requested; one file per key.</li>
            <li><span><b class="command">An application that uses the registry must scan many keys to find the one it is looking for</b></span>. Elektra uses the fastest scan engine available: the file system. There is nothing to scan; given a key name, it is mapped to its corresponding file, and then opened.</li>
            <li><span><b class="command">A system administrator must use special tools to edit values in that blackbox registry implementation</b></span>. Elektra provides a command line tool, <span class="citerefentry"><span class="refentrytitle">kdb</span>(1)</span>, to edit it consistently. But a system administrator can also use a text editor or system's tools (<span><b class="command">chmod</b></span>, <span><b class="command">mv</b></span>, <span><b class="command">cp</b></span>, <span><b class="command">vi</b></span>) to modify Elektra's key-value pair database.</li>
          </ol>
        </div>
        <p>Compared to Gnome's GConf, Elektra is not a daemon, and is much lighter. GConf uses XML documents as backends, stored in user's home directory. XML based software are memory eaters. GConf seems not to be preoccupied with access permissions, making it a good solution only for personal use in desktop (high level) systems. Also it is heavily Gnome dependent as we can see from the libraries it uses:</p>
        <pre class="screen">$ ldd /usr/bin/gconfd-1
    libgconf-1.so.1 =&gt; /usr/lib/libgconf-1.so.1 (0x4375b000)
    liboaf.so.0 =&gt; /usr/lib/liboaf.so.0 (0x4373f000)
    libORBitCosNaming.so.0 =&gt; /usr/lib/libORBitCosNaming.so.0 (0x00cfd000)
    libORBit.so.0 =&gt; /usr/lib/libORBit.so.0 (0x00ca9000)
    libIIOP.so.0 =&gt; /usr/lib/libIIOP.so.0 (0x43735000)
    libORBitutil.so.0 =&gt; /usr/lib/libORBitutil.so.0 (0x00ce9000)
    libm.so.6 =&gt; /lib/tls/libm.so.6 (0x00b50000)
    libgmodule-1.2.so.0 =&gt; /usr/lib/libgmodule-1.2.so.0 (0x00d58000)
    libglib-1.2.so.0 =&gt; /usr/lib/libglib-1.2.so.0 (0x00d31000)
    libdl.so.2 =&gt; /lib/libdl.so.2 (0x00b74000)
    libc.so.6 =&gt; /lib/tls/libc.so.6 (0x00a15000)
    libpopt.so.0 =&gt; /usr/lib/libpopt.so.0 (0x001ff000)
    libwrap.so.0 =&gt; /usr/lib/libwrap.so.0 (0x4387c000)
    /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x009fd000)
    libnsl.so.1 =&gt; /lib/libnsl.so.1 (0x4f727000)
		</pre>
        <p>This is useless for an early boot stage program (<tt class="filename">/usr/lib</tt> may be still unmounted), and for a very small OS installation that won't require desktop features, like a router, small firewall, or any other appliance. On the other hand, the Elektra database access library is very slim with a minimum of dependencies:</p>
        <pre class="screen">$ ldd /lib/libelektra.so
    libc.so.6 =&gt; /lib/tls/libc.so.6 (0x00111000)
    /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x009fd000)
		</pre>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="screenshots"></a>12. Virtual Screenshots</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>Elektra alone can't produce screenshots, because it is just a library/API as we saw above, but since everybody loves them, let's use some visual effects to show some of Elektra's concepts.</p>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="system.hw"></a>12.1. Hardware Status, Elektrified</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>This tree was generated by the <span><b class="command">hwconfKudzu-convert</b></span> program that converts the <tt class="filename">/etc/sysconfig/hwconf</tt> file into Elektra's keys. In this example, we see that it detected a connected mouse. The keys under <tt class="filename">system/hw/byClass/MOUSE/GenericMousePS2psaux</tt> have all hardware properties detected by <span><b class="command">kudzu</b></span>. There is also a <tt class="filename">system/hw/byBus</tt> tree that contains symbolic links to the <tt class="filename">byClass</tt> tree, to facilitate key access.</p>
          <div align="center">
            <img src="pic/hw.png" align="middle" alt="middle" />
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="system.filesystems"></a>12.2. Filesystems Table, Elektrified</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p><span><b class="command">fstab-convert</b></span> created this <tt class="filename">system/filesystems</tt> tree showed here, based on <tt class="filename">/etc/fstab</tt>. A unique identifier was calculated for each filesystem, and a key name generated. <tt class="filename">system/filesystems/mntwork</tt> is in evidence, showing the <tt class="filename">/mnt/work</tt> filesystem. Bellow, we can see standard key names for this filesystem properties. An example is <tt class="filename">system/filesystems/mntwork/mpoint</tt> that contains the value <span class="emphasis"><em>/mnt/work</em></span>, or <tt class="filename">system/filesystems/mntwork/type</tt> that contains <span class="emphasis"><em>ext2</em></span>.</p>
          <div align="center">
            <img src="pic/fstab.png" align="middle" alt="Example of fstab" />
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="xfree"></a>12.3. X.Org Configurations Elektrified</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>All higher level software keys are located under <tt class="filename">system/sw</tt>, as showed above for XFree86 configuration. Pay attention to how easy it is to access and change XFree configuration, without any <tt class="filename">/etc/X11/XF86Config</tt> parsing effort, when using Elektra. XFree will look for its keys under <tt class="filename">system/sw/XFree/current</tt> which is a symbolic link to <tt class="filename">system/sw/XFree/handmade</tt>. This is an example on how the high level usage of symbolic links into the key database provides a lot of flexibility.</p>
          <div align="center">
            <img src="pic/xfree.png" align="middle" alt="Xfree86" />
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="edit"></a>12.4. Easily Editing Elektra Keys</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>The <span><b class="command">kdb edit</b></span> command provides an easy way to edit a group of keys using your prefered editor. It will dump the selected keys into an XML representation, and run the editor to let the user edit them. After user modifications, it will update, remove or include the keys based on the modified XML file. This real screenshot shows me using <span><b class="command">kate</b></span> to modify the XFree configuration keys related to the monitor. If I didn't force it with the <tt class="envar">EDITOR</tt> environment, <span><b class="command">vi</b></span> would be used.</p>
          <div align="center">
            <img src="pic/kdbedit.png" align="middle" alt="Edit kdb easily" />
          </div>
          <p>Or you can use Gregor Burger's regedit GUI to edit keys very easily. Here is a screenshot editing the same above key.</p>
          <div align="center">
            <img src="pic/regedit1.png" align="middle" alt="Edit in regeditor" />
          </div>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="help"></a>13. Wanna Help The Elektra Initiative ?</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>We need a lot of help. The main software library is ready to be used, but we really need it to be used, so then in can become a standard.</p>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="help-patch"></a>13.1. Software Patches</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="orderedlist">
            <ol type="1">
              <li>We need patches for Modprobe, Samba, Apache, PAM etc to use Elektra, instead of <tt class="filename">/etc/modules.conf</tt>, <tt class="filename">/etc/smb.conf</tt>, <tt class="filename">/etc/httpd/httpd.conf</tt>, etc.</li>
              <li>Patches for system initialization scripts to use Elektra instead of <tt class="filename">/etc/sysconfig/network-scripts/*, /etc/sysconfig/*</tt> files.</li>
            </ol>
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="help-awareness"></a>13.2. Marketing and Awareness</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>We need more participation in community events making presentations and advocating. There is an <a href="elektra.sxi" target="_top">OpenOffice presentation entirelly commented</a> that can be used. So if you have strong communication skills, think about making an Elektra presentation in an event close to your town.</p>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="help-port"></a>13.3. Porting and Backends</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="orderedlist">
            <ol type="1">
              <li>Elektra needs platform specific storage backends to be written. For Linux, BSD and Unix, the current backend is fine. For Windows, a Registry storage backend is needed.</li>
              <li>Elektra needs to be ported, mainteined and packaged in other platforms. Windows, BSD, Mac, other Unix.</li>
              <li>Elektra binary packages and their maintainers are need for Slackware, Debian, SuSE Linux, Mandrake, etc. I provide Fedora/Red Hat RPMs.</li>
            </ol>
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="help-perf"></a>13.4. Performance Improvements</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>Speed up reading and writing of keys is needed.</p>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="help-bindings"></a>13.5. Language Bindings</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="orderedlist">
            <ol type="1">
              <li>Perl</li>
              <li>C++ with real classes</li>
              <li>Better Java support</li>
            </ol>
          </div>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="rgcmd"></a>14. The <span><b class="command">kdb</b></span> Command</h2>
            </div>
          </div>
          <div></div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="rgdesc"></a>14.1. Description</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>The <span><b class="command">kdb</b></span> command provide ways to manipulate the Elektra keys database (see <span class="citerefentry"><span class="refentrytitle">elektra</span>(7)</span>) keys.</p>
          <p>The subcommands implemented are very similar to regular UNIX commands like <span><b class="command">ls</b></span>, and <span><b class="command">rm</b></span>, specially in their output and options.</p>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="rgsubc"></a>14.2. Subcommands</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="variablelist">
            <dl>
              <dt>
                <span class="term">
                  <span>
                    <b class="command">get</b>
                  </span>
                </span>
              </dt>
              <dd>
                <p>Get the value from the specified key. Accepts options: <tt class="option">-d</tt>, <tt class="option">-l</tt>, <tt class="option">-f</tt>, <tt class="option">-s</tt></p>
              </dd>
              <dt>
                <span class="term">
                  <span>
                    <b class="command">set</b>
                  </span>
                </span>
              </dt>
              <dd>
                <p>Set the value to the specified key. Accepts options: <tt class="option">-c</tt>, <tt class="option">-t</tt>, <tt class="option">-m</tt>, <tt class="option">-b</tt></p>
              </dd>
              <dt>
                <span class="term">
                  <span>
                    <b class="command">ls</b>
                  </span>
                </span>
              </dt>
              <dd>
                <p>As the <span class="citerefentry"><span class="refentrytitle">ls</span>(1)</span> command, list key names for the specified key, or children keys, if specified a folder key. The <tt class="option">-v</tt> argument will make it show also the values of each key. The <tt class="option">-d</tt> (descriptive) will make it show the comment, key name and its value, as you are watching a plain text file. Accepts options: <tt class="option">-x</tt>, <tt class="option">-d</tt>, <tt class="option">-l</tt>, <tt class="option">-f</tt>, <tt class="option">-v</tt>, <tt class="option">-R</tt></p>
              </dd>
              <dt>
                <span class="term">
                  <span>
                    <b class="command">ln</b>
                  </span>
                </span>
              </dt>
              <dd>
                <p>Creates a key that is a symbolic links to another key.</p>
              </dd>
              <dt>
                <span class="term">
                  <span>
                    <b class="command">mv</b>
                  </span>
                </span>
              </dt>
              <dd>
                <p>Move, or renames a key. Currently it can't move keys across different filesystems.</p>
              </dd>
              <dt>
                <span class="term">
                  <span>
                    <b class="command">rm</b>
                  </span>
                </span>
              </dt>
              <dd>
                <p>As the <span class="citerefentry"><span class="refentrytitle">rm</span>(1)</span> command, removes the key specified.</p>
              </dd>
              <dt>
                <span class="term">
                  <span>
                    <b class="command">edit</b>
                  </span>
                </span>
              </dt>
              <dd>
                <p>A very powerfull subcommand that lets you edit an XML representation of the keys. The parameters it accepts is usually a parent key, so its child keys will be gathered. Can be used with the <tt class="option">-R</tt> flag to work recursively. The editor used is the one set in the <tt class="envar">$EDITOR</tt> environment variable, or <span><b class="command">vi</b></span>. After editing the keys, <span><b class="command">kdb edit</b></span> will analyze them and commit only the changed keys, remove the keys removed, and add the keys added.</p>
              </dd>
              <dt>
                <span class="term"><span><b class="command">export</b></span>, </span>
                <span class="term"><span><b class="command">save</b></span>, </span>
              </dt>
              <dd>
                <p>Export a subtree of keys to XML. If no subtree is defined right after the <span><b class="command">export</b></span> command, <tt class="filename">system</tt> and current <tt class="filename">user</tt> trees will be exported. Output is written to standard output. The output encoding will allways be UTF-8, regardeless of your system encoding. UTF-8 is the most universal charset you can get when exchanging data between multiple systems. Accepts <tt class="option">-f</tt>.</p>
              </dd>
              <dt>
                <span class="term"><span><b class="command">import</b></span>, </span>
                <span class="term"><span><b class="command">load</b></span>, </span>
              </dt>
              <dd>
                <p>Import an XML representation of keys and save it to the keys database. If no filename is passed right after the <span><b class="command">import</b></span> command, standard input is used.</p>
              </dd>
              <dt>
                <span class="term"><span><b class="command">monitor</b></span>, </span>
                <span class="term"><span><b class="command">mon</b></span>, </span>
              </dt>
              <dd>
                <p>Monitor a key for some value change. It will block your command line until a change in the key value is detected, then return its new value.</p>
              </dd>
            </dl>
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="rgopt"></a>14.3. Options</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="variablelist">
            <dl>
              <dt>
                <span class="term">
                  <tt class="option">-R</tt>
                </span>
              </dt>
              <dd>
                <p>Causes to work recursively. In <span><b class="command">ls</b></span>, will list recursively.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-x</tt>
                </span>
              </dt>
              <dd>
                <p>Makes <span><b class="command">ls</b></span> output an XML representation of the keys, instead of an <span><b class="command">ls</b></span>-compatible output.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-l</tt>
                </span>
              </dt>
              <dd>
                <p>Causes to display long results. With <span><b class="command">ls</b></span>, will generate lists similar to <span><b class="command">ls -l</b></span>. With <span><b class="command">get</b></span>, will show also the key name.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-a</tt>
                </span>
              </dt>
              <dd>
                <p>Causes <span><b class="command">ls</b></span> to display also inactive keys. Generate lists similar to <span><b class="command">ls -a</b></span>. Inactive keys are keys which basename begins with a '.' (dot). An example of inactive key: <tt class="filename">system/sw/XFree/current/Monitor/.Monitor1</tt></p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-f</tt>
                </span>
              </dt>
              <dd>
                <p>Causes to work with full key names. A full key name makes sense only on <tt class="filename">user/*</tt> keys, and differentiate from the regular key names in specifying the owner user. If the current user is <tt class="filename">someuser</tt>, the <tt class="filename">user/some/key</tt> full name is <tt class="filename">user:someuser/some/key</tt>. Makes effect in <span><b class="command">ls</b></span>, <span><b class="command">export</b></span> and <span><b class="command">get</b></span> subcommands.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-d</tt>
                </span>
              </dt>
              <dd>
                <p>Causes <span><b class="command">get</b></span> to work descriptivelly. When requesting a key it will show the comment, key name and its value in a fancy format</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-s</tt>
                </span>
              </dt>
              <dd>
                <p>Causes <span><b class="command">get</b></span> to be more friendly to Shell scripts. For example, when requesting <tt class="filename">user/env/env2/PATH</tt>, the output will be PATH="the value", that is, only the basename of the key will be showed and the value will be surrounded by ' " '.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-t type</tt>
                </span>
              </dt>
              <dd>
                <p>When <span><b class="command">set</b></span>ting a key's value, you can specify the type with this switch. Currently accepted types are <span class="type">string</span> for plain text, <span class="type">bin</span> for binary as-is values, <span class="type">dir</span> to create folder keys and <span class="type">link</span> to create symbolic links between keys. Plain text are always stored as <span class="citerefentry"><span class="refentrytitle">UTF-8</span>(7)</span> in Elektra, regardeless of your current encoding (<tt class="envar">$LANG</tt>). If you want to force a value to be stored without the <span class="citerefentry"><span class="refentrytitle">UTF-8</span>(7)</span> encoding (a bad idea), you can set it as binary. Binary values should be avoided, because they are black boxes for system administrators.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-b filename</tt>
                </span>
              </dt>
              <dd>
                <p>Set the key value as the content of file <tt class="filename">filename</tt>. This option is more usefull when setting binary keys.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-m mode</tt>
                </span>
              </dt>
              <dd>
                <p>For the <span><b class="command">set</b></span> command. Will set the key access permission to <tt class="option">mode</tt>, which must be an octal number as for <span class="citerefentry"><span class="refentrytitle"><span><b class="command">chmod</b></span></span>(1)</span>.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-u uid</tt>
                </span>
              </dt>
              <dd>
                <p>Create the key with <tt class="option">uid</tt> user ID. It can be a user name or a uid number.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-g gid</tt>
                </span>
              </dt>
              <dd>
                <p>Create the key with <tt class="option">gid</tt> group ID. It can be a group name or a gid number</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-c comment</tt>
                </span>
              </dt>
              <dd>
                <p>When <span><b class="command">set</b></span>ting keys, you can use this argument to set a descriptive comment for it. This comment is exactly as a comment in a plain text configuration file. The comment is stored as <span class="citerefentry"><span class="refentrytitle">UTF-8</span>(7)</span> regardeless of your current encoding (<tt class="envar">$LANG</tt>).</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">-v</tt>
                </span>
              </dt>
              <dd>
                <p>With the <span><b class="command">ls</b></span> subcommand, will make it show also the value stored in the key.</p>
              </dd>
              <dt>
                <span class="term">
                  <tt class="option">--</tt>
                </span>
              </dt>
              <dd>
                <p>With the <span><b class="command">set</b></span> subcommand, everything after it will be considered the value, even text with dashes (-).</p>
              </dd>
            </dl>
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="example"></a>14.4. Examples</h3>
              </div>
            </div>
            <div></div>
          </div>
          <div class="section" lang="en" xml:lang="en">
            <div class="titlepage">
              <div>
                <div>
                  <h4 class="title"><a id="exset"></a>14.4.1. Setting Keys</h4>
                </div>
              </div>
              <div></div>
            </div>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">kdb set -c "My first key" user/example/key "Some nice value"</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">kdb set user:luciana/example/key -- "Some - nice - value with dashes"</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">KDB_ROOT=user:http/sw/httpd kdb set -u nobody -g http key "Some value"</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">kdb set -b image.png -t bin user/example/binaryKey</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">kdb set -b file.txt user/example/regularKey</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">kdb set -t link system/sw/XFree/current system/sw/XFree/handmade</b>
              </span>
            </p>
          </div>
          <div class="section" lang="en" xml:lang="en">
            <div class="titlepage">
              <div>
                <div>
                  <h4 class="title"><a id="exget"></a>14.4.2. Getting Keys</h4>
                </div>
              </div>
              <div></div>
            </div>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">KDB_ROOT=user/example kdb get key</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">KDB_BACKEND=gconf kdb get user/sw/gnome-terminal/global/active_encodings</b>
              </span>
            </p>
          </div>
          <div class="section" lang="en" xml:lang="en">
            <div class="titlepage">
              <div>
                <div>
                  <h4 class="title"><a id="exls"></a>14.4.3. Listing</h4>
                </div>
              </div>
              <div></div>
            </div>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">kdb ls -laR user:valeria</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">kdb ls -lR system/sw/xorg/current</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">KDB_ROOT=system/sw kdb ls -lR xorg</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">KDB_BACKEND=fstab kdb ls -Rv system/filesystems</b>
              </span>
            </p>
          </div>
          <div class="section" lang="en" xml:lang="en">
            <div class="titlepage">
              <div>
                <div>
                  <h4 class="title"><a id="exmisc"></a>14.4.4. Miscelaneous</h4>
                </div>
              </div>
              <div></div>
            </div>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">kdb ln system/sw/xorg/handmade system/sw/xorg/current</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">kdb mv system/sw/xorg/current system/sw/xorg/old</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">kdb rm system/inittab/rc4</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">KDB_BACKEND=gconf kdb rm user/gconfKey</b>
              </span>
            </p>
          </div>
          <div class="section" lang="en" xml:lang="en">
            <div class="titlepage">
              <div>
                <div>
                  <h4 class="title"><a id="exxml"></a>14.4.5. XML Import and Export</h4>
                </div>
              </div>
              <div></div>
            </div>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">kdb export user/sw/app | sed -e 's|/app/|/app2/|g' | kdb import</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">KDB_ROOT=system/sw kdb export myapp &gt; myappconf.xml</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash# </tt>
              <span>
                <b class="command">kdb import myappconf.xml</b>
              </span>
            </p>
            <p>
              <tt class="prompt">bash$ </tt>
              <span>
                <b class="command">KDB_BACKEND=gconf kdb export user/sw</b>
              </span>
            </p>
          </div>
        </div>
      </div>
      <div class="section" lang="en" xml:lang="en">
        <div class="titlepage">
          <div>
            <div>
              <h2 class="title" style="clear: both"><a id="api"></a>15. Application Programing Interface</h2>
            </div>
          </div>
          <div></div>
        </div>
        <p>Elektra's API consists of 3 classes of objects and methods to manipulate them. The main implementation of the library is written in C and is <a href="elektra-api/html/index.html" target="_top">fully documented in Doxygen</a>.</p>
        <div align="center">
          <img src="pic/classes.png" align="middle" alt="The three classes" />
        </div>
        <p>The classes are:</p>
        <div class="variablelist">
          <dl>
            <dt>
              <span class="term">
                <span class="type">KeyDB</span>
              </span>
            </dt>
            <dd>A class of static methods only. You can't instantiate an object of this class. All the business logic for retrieving and commiting key data to physical media is owned by this class. Example methods are <tt class="function">kdbSetKey</tt>, <tt class="function">kdbGetKey</tt>, <tt class="function">kdbGetValue</tt>, <tt class="function">kdbGetChildKeys</tt>, etc. This last is one of the most powerfull, returning a <span class="type">KeySet</span> containing all child keys of a folder key, with the option to retrieve them recursively, sorted, dereferencing links, etc.</dd>
            <dt>
              <span class="term">
                <span class="type">Key</span>
              </span>
            </dt>
            <dd>The obvious entity class. Contains key's name, data and metadata. Example of its methods are <tt class="function">keyInit</tt>, <tt class="function">keySetName</tt>, <tt class="function">keySetUID</tt>, <tt class="function">keyGetString</tt>, <tt class="function">keyIsDir</tt>, etc.</dd>
            <dt>
              <span class="term">
                <span class="type">KeySet</span>
              </span>
            </dt>
            <dd>A group of <span class="type">Key</span>s. Real applications use to get and set several keys, and this class is used to store corelated keys that were retrieved together in one shot. Example of its methods are <tt class="function">ksInsert</tt>, <tt class="function">ksAppend</tt>, <tt class="function">ksInsertKeys</tt>, etc.</dd>
          </dl>
        </div>
        <p>The API is documented in manual pages <span class="citerefentry"><span class="refentrytitle">key</span>(3)</span> and <span class="citerefentry"><span class="refentrytitle">kdb</span>(3)</span> or you can <a href="elektra-api/html/index.html" target="_top">browse</a> or <a href="elektra-api.tar.gz" target="_top">download</a> the full API documentation.</p>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="exprm"></a>15.1. Example program</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>Here is an example of how to use the Elektra API. This program will get all keys that matter under <tt class="varname">system/sw/MyApp</tt> manipulate some, and re-save them.</p>
          <pre class="programlisting">
/*********************************************************

To compile this example:

	$ cc `pkg-config --libs elektra` -o example example.c
		or
	$ cc -L/lib -lelektra -o example example.c


**********************************************************/


#include &lt;stdio.h&gt;
#include &lt;kdb.h&gt;

#define MY_APP_ROOT   "system/sw/MyApp"


/* Read config keys for this application */
int readConfig(KeySet *myConfig) {
	int rc;

	/* Open the kdb */
	kdbOpen();
	
	/* Get all value keys for this application */
	rc=kdbGetChildKeys(MY_APP_ROOT, myConfig, KDB_O_RECURSIVE);
	
	/* Close the Key database */
	kdbClose();
	
	return rc;
}


/* Change some keys */
void changeConfig(KeySet *myConfig) {
	Key *current;
	
	ksRewind(myConfig);
	while ((current=ksNext(myConfig))) {
		char keyName[200];
		char value[300];
		
		keyGetFullName(current,keyName,sizeof(keyName));
		keyGetString(current,value,sizeof(value));
		
		printf("Key %s was %s. ", keyName, value);
		
		/* Add "- modified" to the end of the string */
		strcat(value,"- modified");
		
		/* change the key value */
		keySetString(current,value);
		
		/* reget it, just as an example */
		keyGetString(current,value,sizeof(value));
		
		printf("Now is %s\n", value);
	}
}


/* Save the modified keys */
int saveConfig(KeySet *myConfig) {
	kdbOpen();
	kdbSetKeys(myConfig);
	kdbClose();
}



int main(int argc, char **argv) {
	KeySet *myConfig=ksNew();
	
	/* Get configuration values, and just continue if there is no error */
	if (readConfig(myConfig)) {
		perror("Couldn't get my configuration. Reason");
		exit(1);
	} else {
		printf("Retrieved %d keys\n",ksGetSize(myConfig));
	}
		
	changeConfig(myConfig);
	saveConfig(myConfig);
	
	/* Free all keys and resources in the key set */
	ksDel(myConfig);
	
	return 0;
}
</pre>
          <p> Things to note in this source:</p>
          <div class="orderedlist">
            <ol type="1">
              <li>The keys are manipulated in <tt class="function">changeConfig()</tt> after we called <tt class="function">kdbClose()</tt>. You don't need the key database to be open to manipulate keys.</li>
              <li>We called <tt class="function">kdbOpen()</tt> again in <tt class="function">saveConfig()</tt>, to prepare to commit the changes.</li>
              <li>We called <tt class="function">ksClose()</tt> in the end to free all memory resources we used.</li>
            </ol>
          </div>
        </div>
        <div class="section" lang="en" xml:lang="en">
          <div class="titlepage">
            <div>
              <div>
                <h3 class="title"><a id="linking"></a>15.2. Compiling and Linking</h3>
              </div>
            </div>
            <div></div>
          </div>
          <p>All Elektra methods are declared in the <tt class="filename">/usr/include/kdb.h</tt> file and defined in the <tt class="filename">/lib/libelektra.so</tt> library. So to compile it you simply need to:</p>
          <pre class="screen">
<tt class="prompt">bash$ </tt><span><b class="command">cc `pkg-config --libs elektra` -o myapp myapp.c</b></span>
		</pre>
          <p>or, if you don't have <span><b class="command">pkg-config</b></span>:</p>
          <pre class="screen">
<tt class="prompt">bash$ </tt><span><b class="command">cc -L /lib -lelektra -o myapp myapp.c</b></span>
		</pre>
        </div>
      </div>
      <div class="appendix" lang="en" xml:lang="en">
        <h2 class="title" style="clear: both"><a id="about"></a>A. About this Document</h2>
        <p>This document must be distributed under the terms of <a href="http://www.gnu.org/licenses/fdl.html" target="_top">GNU Free Documentation License</a>.</p>
        <p>This document was written in DocBook XML format, and is a wrapper for Elektra's man pages with some addons.</p>
        <p>Copyright 2004, Avi Alkalay.</p>
      </div>
    </div>
