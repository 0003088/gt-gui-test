/***************************************************************************
          cppplugin.c  -  Skeleton of a plugin to be copied
                             -------------------
    begin                : Fri May 21 2010
    copyright            : (C) 2010 by Markus Raab
    email                : elektra@markus-raab.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the BSD License (revised).                      *
 *                                                                         *
 ***************************************************************************/



/***************************************************************************
 *                                                                         *
 *   This is the skeleton of the methods you'll have to implement in order *
 *   to provide libelektra.so a valid plugin.                             *
 *   Simple fill the empty _cppplugin functions with your code and you are   *
 *   ready to go.                                                          *
 *                                                                         *
 ***************************************************************************/


#include "cppplugin.hpp"

/* generated by error, always the same */

#include <key>
#include <keyset>

namespace cppplugin
{

template<typename T>
int kdbOpen(ckdb::Plugin *handle)
{
	int ret;
	try {
		T * t = new T();
		ret = t->open();
		elektraPluginSetData(handle, t);
	}
	catch (...)
	{
		return -1;
	}

	return ret;
}

template<typename T>
int kdbClose(ckdb::Plugin *handle)
{
	int ret;
	T * t = static_cast<T *>(elektraPluginGetData(handle));
	try {
		ret = t->close();
	}
	catch (...)
	{
		return -1;
	}

	try {
		delete (t);
	}
	catch (...)
	{
		return -1;
	}

	return ret;
}

template<typename T>
ssize_t kdbGet(ckdb::Plugin *handle, ckdb::KeySet *cks, const ckdb::Key *cparentKey)
{
	T * t = static_cast<T *>(elektraPluginGetData(handle));
	try {
		kdb::Key parentKey (const_cast<ckdb::Key *>(cparentKey));
		kdb::KeySet  ks (cks);
		return t->get(ks, parentKey);
	}
	catch (...)
	{
		return -1;
	}
}

template<typename T>
ssize_t kdbSet(ckdb::Plugin *handle, ckdb::KeySet *cks, const ckdb::Key *cparentKey)
{
	T * t = static_cast<T *>(elektraPluginGetData(handle));
	try {
		kdb::Key parentKey (const_cast<ckdb::Key *>(cparentKey));
		kdb::KeySet  ks (cks);
		return t->set(ks, parentKey);
	}
	catch (...)
	{
		return -1;
	}
}

}

/* User provided part in separate .hpp and .cpp files
 * TYPE replaced with pluginname */

namespace cppplugin
{

class TYPE
{
	int x;

public:
	TYPE() {}
	~TYPE() {}

	int open() { return 0; }
	int close() { return 0; }

	ssize_t get(kdb::KeySet &ks, kdb::Key &parentKey);
	ssize_t set(kdb::KeySet &, kdb::Key &) { return 0; }
};

}



#include <iostream>

namespace cppplugin
{

// noninline in separated header
ssize_t TYPE::get(kdb::KeySet &, kdb::Key &)
{
	std::cout << "Hello World" << std::endl;;
	return 0;
}

}

/* Generated part
 * TYPE replaced with pluginname */

extern "C"
{

int kdbOpen_TYPE(ckdb::Plugin *handle)
{
	return cppplugin::kdbOpen<cppplugin::TYPE>(handle);
}

int kdbClose_TYPE(ckdb::Plugin *handle)
{
	return cppplugin::kdbClose<cppplugin::TYPE>(handle);
}

ssize_t kdbGet_TYPE(ckdb::Plugin *handle, ckdb::KeySet *returned, const ckdb::Key *parentKey)
{
	return cppplugin::kdbGet<cppplugin::TYPE>(handle, returned, parentKey);
}

ssize_t kdbSet_TYPE(ckdb::Plugin *handle, ckdb::KeySet *returned, const ckdb::Key *parentKey)
{
	return cppplugin::kdbSet<cppplugin::TYPE>(handle, returned, parentKey);
}

ckdb::Plugin *ELEKTRA_PLUGIN_EXPORT(cppplugin)
{
	return elektraPluginExport(BACKENDNAME,
		ELEKTRA_PLUGIN_OPEN,	&kdbOpen_TYPE,
		ELEKTRA_PLUGIN_CLOSE,	&kdbClose_TYPE,
		ELEKTRA_PLUGIN_GET,	&kdbGet_TYPE,
		ELEKTRA_PLUGIN_SET,	&kdbSet_TYPE,
		ELEKTRA_PLUGIN_END);
}

}
