diff -Naur sysvinit-2.85/contrib/inittab-convert sysvinit-2.85-elektrified/contrib/inittab-convert
--- sysvinit-2.85/contrib/inittab-convert	1969-12-31 21:00:00.000000000 -0300
+++ sysvinit-2.85-elektrified/contrib/inittab-convert	2004-09-03 13:47:57.000000000 -0300
@@ -0,0 +1,34 @@
+#!/bin/sh
+
+########################################################################
+##
+## This script will read the /etc/inittab and create an
+## equivalent registry tree under $ROOT.
+##
+## The correct way to run it is:
+##
+## # ./inittab-convert | sh -e
+##
+##
+## To make tests you can do:
+##
+## $ ROOT=user/test ./inittab-convert | sh -e
+##
+## Avi Alkalay <avi@unix.sh>
+## March 2004
+##
+########################################################################
+
+
+[ -z "$RG" ] && RG="kdb"
+[ -z "$ROOT" ] && ROOT="system"
+
+
+cat /etc/inittab | sed -e 's/\#.*$//g; s/\"/\\"/g; s/\;/\\;/' | grep -v '^$' |
+		awk -F : "{
+			if (seq) seq=seq\",\"\$1;
+			else seq=\$1;
+			print \"$RG set -c \'Active runlevels\'   $ROOT/init/\" \$1 \"/runlevels    -- \" \$2;
+			print \"$RG set -c \'Approach\'           $ROOT/init/\" \$1 \"/action       -- \" \$3;
+			print \"$RG set -c \'Program to execute\' $ROOT/init/\" \$1 \"/process      -- \" \$4;
+		} END {print \"$RG set -c \'Sequence entries will be run\' $ROOT/init/sequence -- \" seq;}"
diff -Naur sysvinit-2.85/README.sysvinit.Elektra.txt sysvinit-2.85-elektrified/README.sysvinit.Elektra.txt
--- sysvinit-2.85/README.sysvinit.Elektra.txt	1969-12-31 21:00:00.000000000 -0300
+++ sysvinit-2.85-elektrified/README.sysvinit.Elektra.txt	2004-09-04 10:29:33.775750848 -0300
@@ -0,0 +1,111 @@
+THE /sbin/init PROGRAM WAS ELEKTRIFIED
+
+   Instead of reading its actions from /etc/inittab, it can now work with a
+   configuration tree under system/init on the Elektra (http://elektra.sf.net)
+   key/value pair database.
+
+   So where you once had human-readable inittab entries like
+
+       l3:3:wait:/etc/rc.d/rc 3
+       ca::ctrlaltdel:/sbin/shutdown -t3 -r now
+       2:2345:respawn:/sbin/mingetty tty2
+       x:5:respawn:/etc/X11/prefdm -nodaemon
+
+   you'll have the equivalent human-and-machine-readable Elektra keys:
+
+       system/init/l3/action=wait
+       system/init/l3/process=/etc/rc.d/rc 3
+       system/init/l3/runlevels=3
+
+       system/init/ca/action=ctrlaltdel
+       system/init/ca/process=/sbin/shutdown -t3 -r now
+       system/init/ca/runlevels=
+
+       system/init/2/action=respawn
+       system/init/2/process=/sbin/mingetty tty2
+       system/init/2/runlevels=2345
+
+       system/init/x/action=respawn
+       system/init/x/process=/etc/X11/prefdm -nodaemon
+       system/init/x/runlevels=5
+
+       system/init/sequence=...,l3,ca,2,x,...       
+
+   Then, to change some value you wont have to manually edit
+   /etc/inittab anymore. You (or a program using Elektra API), with root
+   permissions, will be able to use the kdb command or regedit GUI tool to
+   change each single key. So to change your default run level to 5,
+   you'll do:
+
+       bash# kdb set system/init/id/runlevels 5
+
+   The patch was carefully written, so if the elektrified /sbin/init does not
+   find its configuration keys under system/init, it will default to the old
+   method (use /etc/inittab) and you'll see warnings on the screen about it.
+
+
+
+
+
+
+COMPILING SysVinit PACKAGE WHITH THE ELEKTRA PATCH
+
+   You'll obviously need Elektra installed to compile it, and you can
+   get it from http://elektra.sf.net, as source code or binray RPMs or debs.
+   If the the original distribution of SysVinit, from Miquel van Smoorenburg,
+   does not already contain the patch, you can get it also
+   from http://elektra.sf.net
+
+   So if needed, apply the patch:
+
+      bash$ tar -zxvf sysvinit-2.85.tar.gz
+      bash$ cd sysvinit-2.85
+      bash$ patch -p 1 -b < ../sysvinit-2.85-elektra.patch
+
+   These modifications only affect the init binary, since this is the only
+   program in the package that reads /etc/inittab.
+
+   To compile it, youll have to use a special make flag like this:
+
+      bash$ make ELEKTRA=1
+
+   otherwise you'll get a non-elektrified init binary, exactly the way it was
+   before applying the patch.
+
+   After compiling you can check it and see these results:
+
+      bash$ ldd ./init
+        libkdb.so => /lib/libkdb.so (0xb75d8000)
+        libc.so.6 => /lib/tls/libc.so.6 (0xb749f000)
+        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0xb75eb000)
+
+   Now the init binary requires libkdb.so, which is the Elektra library.
+
+
+
+
+
+
+
+
+MIGRATING /etc/inittab TO ELEKTRA KEYS
+
+   A script is provided for you to convert your old /etc/inittab to
+   Elektra keys. To use it you'll need root permissions:
+
+       bash# inittab-convert | sh -e
+
+   After doing this, and installing the "elektrified" version of init in /sbin,
+   you can reboot your machine too see it booting.
+
+   You can see what the script does, without actually doing it, executing:
+
+       bash$ inittab-convert
+
+   and you don't need root permissions for that.
+
+
+Enjoy,
+Avi Alkalay
+The Elektra Project
+Sep 1, 2004
diff -Naur sysvinit-2.85/src/init.c sysvinit-2.85-elektrified/src/init.c
--- sysvinit-2.85/src/init.c	2003-04-15 08:16:41.000000000 -0300
+++ sysvinit-2.85-elektrified/src/init.c	2004-09-04 11:06:54.584096200 -0300
@@ -7,7 +7,7 @@
  *
  * Version:	@(#)init.c  2.85  15-Apr-2003  miquels@cistron.nl
  */
-#define VERSION "2.85"
+#define VERSION "2.85 (Elektrified)"
 #define DATE    "15-Apr-2003"
 /*
  *		This file is part of the sysvinit suite,
@@ -26,6 +26,12 @@
  *		did_boot made global and added to state - thanks, Miquel.
  *		Yet another file descriptors leak - close state pipe if 
  *		re_exec fails.
+ *
+ * Modified:	04 Sep 2004, Avi Alkalay:
+ *		Patch to use Elektra keys from system/init instead of /etc/inittab.
+ *		Must be compiled with 'make ELEKTRA=1' to activate it.
+ *		While booting, if init does not find its keys,
+ *		defaults to /etc/inittab again.
  */
 
 #include <sys/types.h>
@@ -49,6 +55,10 @@
 #include <sys/syslog.h>
 #include <sys/time.h>
 
+#ifdef ELEKTRA
+#include <kdb.h>
+#endif
+
 #ifdef __i386__
 #  if (__GLIBC__ >= 2)
      /* GNU libc 2.x */
@@ -1087,6 +1097,43 @@
   log(L_VB, "Reading inittab");
 #endif
 
+#ifdef ELEKTRA
+  int useinittab=0;
+  char sequence[500]; /* a big enough buffer */
+  char *seqcursor=sequence;
+
+  /* we really need it all zeroed to make get_part() work correctly */
+  memset(sequence,0,sizeof(sequence));
+  
+  /* we need this initializations too, than patch works correctly */
+  id=0;
+  fp=0;
+
+  /*
+   *	Start affairs with Key database
+   */
+  kdbOpen();
+
+  /*
+   * Since the key database is not sequential
+   * as a regular file, we need a master sequence
+   * to follow, and it can be found in
+   * the 'system/init/sequence' key, so retrieve it first.
+   */
+  kdbGetValueByParent(INITKEYS,"sequence",sequence,sizeof(sequence));
+
+  if (*sequence==0) {
+	log(L_VB, "No init sequence found in %s/sequence key",INITKEYS);
+	log(L_VB, "Fall back to /etc/inittab");
+	/* we couldn't find our configuration keys,
+	 * so default to old /etc/inittab
+	 */
+	useinittab=1; /* was 0 by default */
+	kdbClose(); /* will not use the Keys database anymore */
+  }
+
+  if (useinittab)
+#endif /* ELEKTRA */
   /*
    *	Open INITTAB and real line by line.
    */
@@ -1097,6 +1144,54 @@
 	/*
 	 *	Add single user shell entry at the end.
 	 */
+#ifdef ELEKTRA
+	if (useinittab) id=0;
+	else id=get_part(seqcursor,',');
+	if (id) {
+		/*
+		 * a buffer to store the complete key name,
+		 * for example 'system/init/pf'
+		 */
+		unsigned int idsize=strlen(id);
+		char entrykeyname[sizeof(INITKEYS)+idsize+10];
+		char *bufcursor=buf;
+		char *separator=":";
+
+		strcpy(buf,id);
+		strcat(buf,separator);
+		bufcursor+=idsize+1;
+
+		/*
+		 * Now prepare the entry root key name
+		 * as 'system/init/pf'
+		 */
+		strcpy(entrykeyname,INITKEYS);
+		strcat(entrykeyname,"/");
+		strcat(entrykeyname,id);
+
+		/*
+		 * Now read the rlevel,action and proccess in the sequence
+		 * order, and feed the buf buffer for the original program
+		 * business logic to parse
+		 */
+		kdbGetValueByParent(entrykeyname,"runlevels",
+			bufcursor,sizeof(buf)-(bufcursor-buf));
+		strcat(buf,separator);
+		bufcursor=buf+strlen(buf);
+
+		kdbGetValueByParent(entrykeyname,"action",
+			bufcursor,sizeof(buf)-(bufcursor-buf));
+		strcat(buf,separator);
+		bufcursor=buf+strlen(buf);
+
+		kdbGetValueByParent(entrykeyname,"process",
+			bufcursor,sizeof(buf)-(bufcursor-buf));
+
+		strcat(buf,"\n"); /* original parser bellow needs this */
+
+		seqcursor+=idsize+1;
+	} else
+#endif /* ELEKTRA */
 	if (fp == NULL || fgets(buf, sizeof(buf), fp) == NULL) {
 		done = 1;
 		/*
@@ -1145,6 +1240,10 @@
 	if (action && strlen(action) > 32)
 		strcpy(err, "action field too long");
 	if (err[0] != 0) {
+#ifdef ELEKTRA
+		if (!useinittab) log(L_VB, "%s/%s: %s", INITKEYS, id, err);
+		else
+#endif /* ELEKTRA */
 		log(L_VB, "%s[%d]: %s", INITTAB, lineNo, err);
 #if DEBUG
 		log(L_VB, "%s:%s:%s:%s", id, rlevel, action, process);
@@ -1162,6 +1261,12 @@
 			break;
 		}
 	if (actionNo == -1) {
+#ifdef ELEKTRA
+		if (!useinittab)
+			log(L_VB, "%s/%s: %s: unknown action field",
+				INITKEYS, id, action);
+		else
+#endif /* ELEKTRA */
 		log(L_VB, "%s[%d]: %s: unknown action field",
 			INITTAB, lineNo, action);
 		continue;
@@ -1172,6 +1277,12 @@
 	 */
 	for(old = newFamily; old; old = old->next) {
 		if(strcmp(old->id, id) == 0 && strcmp(id, "~~")) {
+#ifdef ELEKTRA
+			if (!useinittab)
+				log(L_VB, "%s/%s: duplicate ID field \"%s\"",
+					INITKEYS, id, id);
+			else
+#endif /* ELEKTRA */
 			log(L_VB, "%s[%d]: duplicate ID field \"%s\"",
 				INITTAB, lineNo, id);
 			break;
@@ -1268,6 +1379,10 @@
   /*
    *	We're done.
    */
+#ifdef ELEKTRA
+  if (!useinittab) kdbClose();
+  else
+#endif /* ELEKTRA */
   if (fp) fclose(fp);
 
   /*
diff -Naur sysvinit-2.85/src/Makefile sysvinit-2.85-elektrified/src/Makefile
--- sysvinit-2.85/src/Makefile	2001-11-06 09:58:16.000000000 -0200
+++ sysvinit-2.85-elektrified/src/Makefile	2004-09-03 13:47:57.000000000 -0300
@@ -13,6 +13,11 @@
 LDFLAGS	= -s
 STATIC	=
 
+ifneq ($(ELEKTRA),)
+CFLAGS	+= -DELEKTRA
+STATIC	+= -L/lib -lkdb
+endif
+
 # For Debian we do not build all programs, otherwise we do.
 ifeq ($(DEBIAN),)
 PROGS	= init halt shutdown killall5 runlevel sulogin utmpdump \
diff -Naur sysvinit-2.85/src/paths.h sysvinit-2.85-elektrified/src/paths.h
--- sysvinit-2.85/src/paths.h	2003-04-14 08:37:01.000000000 -0300
+++ sysvinit-2.85-elektrified/src/paths.h	2004-09-04 09:47:50.000000000 -0300
@@ -17,6 +17,9 @@
 #define CONSOLE		"/dev/console"		/* Logical system console */
 #define SECURETTY	"/etc/securetty"	/* List of root terminals */
 #define SDALLOW		"/etc/shutdown.allow"	/* Users allowed to shutdown */
+#ifdef ELEKTRA
+#define INITKEYS	"system/init"		/* Root for init Elektra keys */
+#endif
 #define INITTAB		"/etc/inittab"		/* Location of inittab */
 #define INIT		"/sbin/init"		/* Location of init itself. */
 #define NOLOGIN		"/etc/nologin"		/* Stop user logging in. */
