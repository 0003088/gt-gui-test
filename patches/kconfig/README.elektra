ELEKTRIFIED KCONFIG FOR KDE 3.x :
---------------------------------

  *WARNING* : This patch is somewhat hack. The fact is KDE 3 haven't got clean
  interface for allowing configuration backend which doesn't rely on files. While
  this patch try to propose a solution for allowing such backend, it can't be seen
  as a definitive solution. The true KDE elektra backend will come with KDE 4 which
  promise a much better abstraction which will allow non-file oriented backend.
  Waiting that, you can play with this patch and see how KDE + Elektra will be a 
  huge step forward, briging to you a levef of software integration which was, IMHO,
  never saw on Linux systems.


  Thanks to drop me a note at sizon5@gmail.com bout your experience with this patch ! ;-)

I) Introduction :
-----------------

   Elektra will act as KConfig Backend for resource type "config" which contain the
entire KDE software configuration. Configuration isn't imported "in the fly" from
your current INI files to Elektra. The reason for that is about credentials. KDE
system-wide configuration files reside in /etc/kde (perhaps /usr/share/config on your
system) and are accessible by root only. Of course, i didn't want to impose to run KDE
as root for key importation.

   So you have to run kde2elektra.php script for import your current KDE configuration
into Elektra.

  This patch allow you to fetch configuration of other elektrified software on your system
using KConfig framework. As an example, here a piece of code which retrieve Xorg configuration :

   KConfig *cfg = new KConfig("system/sw/xorg/current", true, false, "elektra-config");

   Yeah, that mean you can now use the very good KConfig XT stuff for create really good software
configuration GUI.

I-a ) key map :
---------------

   By default, Kde's configuration reside under keys :

		system/sw/kde/current/config/
		user/sw/kde/current/config/

   You can redefine/add keys directory using :
	$KDEKEYS & $KDEKEYHOME env. var

   You can add key prefixes in 
		kdeglobals/Directories/key_prefixes

   You can add key patch to parse in
		kdeglobals/Directories/key_elektra-config


II) Apply patch :
-----------------

   This patch was done using latest KDE source code : kdelibs-3.5.2.

   Decompress kdelibs-3.5.2.tar.bz2
	tar -xjvf kdelibs-3.5.2.tar.bz2

   Applying patch:
	cd kdelibs-3.5.2
	patch -p1 < /home/yl/elektra/kconfig-elektra.patch

   Compiling:
	Since re-compile all the kdelibs can take hours, here a short path
   which build only dependency and libkdecore :

	./configure --without-arts
	cd dcop make all
	cd ../kdefx && make all
	cd ../libltdl && make all
	cd ../kdecore && make all

   Backup your old kdelib:
	cp /usr/lib/libkdecore.so.x.x.x /usr/lib/libkdecore.so.x.x.x.orig

   Install patched one:
	!! Exit KDE & KDM !!
	and then:

	cp kdelibs/kdecore/.libs/libkdecore.so.x.x.x /usr/lib


III) Configuration import :
---------------------------

   At this time configuration import is done by a small PHP script. This
script act in three times :

		
	1) Make a list of directories containing KDE configuration stuff
		- Fetch KDE configuration directory layout from kde-config
		- Fetch home directories for each user of the system.

	2) For each file of these directories, parse them and fetch key name
	   and key value

	3) Create a "kdb" command line for key importation.

   So, for import entire KDE configuration to elektra, you have to run as root:

	[root@tower ~]./kde2elektra.php | sh -e

   If you want check things, you could redirect stuff to a file

	[root@tower ~]./kde2elektra.php > key_import

   Now, you can just run KDE, cross-fingers, then open kdbedit ! =]


IV) Some notes about what was done :
------------------------------------


IV - a) KDE file to key mapping :
---------------------------------

   Everything in KConfig rely on the fact that configuration are
stored in configuration file. Moreover, that rely that one
configuration (i.e: kwrite) are stored in one file (i.e: kwriterc).
	
   Happily, when application use KConfig, they doesn't have to provide
absolute path for load their config. Rather than that, they provide
relative file's name and a resource type : "config". And most of these
application (yes, most ... i saw some exception :-/) use KConfig like that.
This resource type design some path where to lookup for the configuration
file. For example, on my system its :

	[yl@tower kdecore]$ kde-config --path config
	/home/yl/.kde/share/config/:/etc/kde/

File is searched firstly from /etc/kde then from /home/yl/.kde/share/config/.
The file which reside in /etc/kde give default values while file residing
in home directory give user specific values.

So, actually, the file to key mapping is done quite easily :

	Map /etc/kde -> system/sw/kde
	Map ~/.kde/share/config -> user/sw/kde

This mapping is actually hardcoded in source file. Perhaps this should have to
be changed (see TODO)

   When KConfig receive an absolute file name, KConfig will simply ignore elektra
and use the "old" INI backend. This allow smooth migration in the wait of a better
world.

IV - b) KConfigBackEnd re-designed :
------------------------------------

   KConfigBackEnd is the abstract class for implement new concrete backend. The original
KDE version define two pure virtual methods which need to be implemented by the concrete
backend :

	parseConfigFiles() -> Read configuration from the current configuration file
	sync() -> Write configuration to the current configuration file

while providing default and non-overridable implementation for methods :

	changeFileName() -> Change current configuration file
	checkConfigFilesWritable() -> Check if current configuration file is writable
	lockFile() -> Lock configuration file

With this design, elektra backend couldn't work cause of the "changeFileName()" method.
Since elektra backend can't work on absolute file name, that mean we have to be able
to change concrete backend dependly of the file name and resource type :

	- filename is relative AND resource is "config" -> elektra backend
	- absolute filename OR resource is NOT "config" -> ini backend

Moreover, methods like checkConfigFilesWritable() need to be reimplemented by elektra backend
since we aren't no more working on file.

   The new KConfigBackEnd is an instanciable class which act as a wrapper for parser (that's
the new name for backend).

	KConfigBackend {
		private:
			[...]
			KConfigParser	*mParser;
			[...]

		public:
			[...]
			void changeFileName(const QString &_fileName,
		                                    const char * _resType,
		                                    bool _useKDEGlobals);
			lockFile(bool bGlobal)
			parseConfigFiles()
			sync(bool bMerge)
			bool checkConfigFilesWritable(bool warnUser)
			[...]
	}

mParser is assigned in changeFileName (choose between KConfigINIParser & KConfigElektraParser)
lockFile(), parseConfigFiles(), sync(), checkConfigFilesWritable() wrap functions of the same
name inside the Parser. Example :

	lockFile(bool bGlobal)
	{
		if ( mParser )
			return mParser->lockFile(bGlobal);

		return 0;
	}

This way, API isn't modified and backend could be changed on the fly after the KConfig object creation.

V) TODO :
---------
	
	* Test key flags (like "kiosk", deleted, expanded). Code is here yet, but need test.
	* Clean-up & test ...

VI) History
-----------

  05 May 2006: First version of patch & README
  08 May 2006: Added some amelioration to the patch (kstandarddirs, access to
               to elektra global namespace). README report these changes (need rewrite these
               nicely).
  21 May 2006: Allow KSimpleConfig to use elektra. Change resource from "config-elektra" to "elektra-config".
               Change kde keys from "system/sw/kde/" to "system/sw/kde/current/config/"


For Elektra Initiative,
Yannick Lecaillez.
<sizon5@gmail.com>

05-May-2006.
